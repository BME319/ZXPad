<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="user-scalable=no, initial-scale=1.4, maximum-scale=2, minimum-scale=1, width=device-width, height=device-height, target-densitydpi=device-dpi" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<link rel="stylesheet" href="css/jquery.mobile-1.4.2.css" />
<link href="css/timeLine.css" rel="stylesheet" type="text/css" />
<style type="text/css">
/*checkbox样式*/



input[type=checkbox] {
	visibility: hidden;
}
.checkboxRound {
	width: 20px;
	height: 20px;
	background: #ddd;
	margin: 2px 20px;
	border-radius: 100%;
	position: relative;
	-webkit-box-shadow: 0px 1px 3px rgba(0,0,0,0.5);
	-moz-box-shadow: 0px 1px 3px rgba(0,0,0,0.5);
	box-shadow: 0px 1px 3px rgba(0,0,0,0.5);
}
.checkboxRound label {
	display: block;
	width: 16px;
	height: 16px;
	border-radius: 100px;
	-webkit-transition: all .5s ease;
	-moz-transition: all .5s ease;
	-o-transition: all .5s ease;
	-ms-transition: all .5s ease;
	transition: all .5s ease;
	cursor: pointer;
	position: absolute;
	top: 2px;
	left: 2px;
	z-index: 1;
	background: #EAEAEA;
	-webkit-box-shadow: inset 0px 1px 3px rgba(0,0,0,0.5);
	-moz-box-shadow: inset 0px 1px 3px rgba(0,0,0,0.5);
	box-shadow: inset 0px 1px 3px rgba(0,0,0,0.5);
}
.checkboxRound input[type=checkbox]:checked + label {
	background: #4BCB6C;
}
textarea#hyperclass {
	resize: none;
	width: 300px;
	height: 280px;
	max-height: 300px;
	max-width: 300px;
	overflow: auto;
	border: 0;
}
#TextInput2 {
	width: 20%
}
#TextInput1 {
	width: 20%
}
div#CPPart1 {
	width: 65%
}
div#CPPart2 {
	width: 30%;
	text-align: center;
	position: fixed;
	top: 70px;
	right: 5px;
}
table.gridtable {
	font-family: verdana, arial, sans-serif;
	font-size: 11px;
	color: #333333;
	border-width: 1px;
	border-color: #666666;
	border-collapse: collapse;
}
table.gridtable th {
	border-width: 1px;
	padding: 8px;
	border-style: solid;
	border-color: #666666;
	background-color: #dedede;
}
table.gridtable td {
	border-width: 1px;
	padding: 8px;
	border-style: solid;
	border-color: #666666;
	background-color: #ffffff;
}
#historyUl, #historyUl p {
	margin: 0px;
	padding: 0px;
	border: none;
}
#ClinicInfoPage #ClinicInfoDetail-form.ui-panel {
	width: 45em;
}
#ClinicInfoPage #ClinicInfoDetail-form.ui-panel-closed {
	width: 0;
}
#ClinicInfoPage .ui-panel-page-content-position-left, .ui-panel-dismiss-open.ui-panel-dismiss-position-right {
	left: 0em;/*panel左边页面关闭触发范围*/
	right: 45em;/*panel页面关闭触发范围*/
}
<!--
/************ Table ************/-->
.dtypetable {
	width: 100%;
	border-collapse: collapse;
	border: 1px solid #ccc;
}
.dtypetable thead td {
	font-size: 20px;
	color: #000000;
	text-align: center;
	background: url(table_top.jpg) repeat-x top center;
	border: 1px solid #ccc;
	font-weight: bold;
}
.dtypetable tbody tr {
	background: #fff;
	font-size: 20px;
	color: #000000;
}
.dtypetable tbody tr.alt-row {
	background: #f2f7fc;
}
.dtypetable td {
	line-height: 20px;
	text-align: left;
	padding: 4px 10px 3px 10px;
	height: 18px;
	border: 1px solid #ccc;
}
</style>
</head>

<body>
<div data-role="page" id="ClinicInfoPage">
  <div data-role="header" data-position="fixed" data-theme="a" data-tap-toggle="false"> 
    <a href="javascript: location.href='HomePage.html?';" data-icon="home" data-iconpos="notext" data-shadow="false" data-iconshadow="false">主页</a>
    <h1>创建计划</h1>
    
    <!--navbar -->
    <div data-role="navbar" >
      <ul>
        <li>
          <button class="ui-btn-active ui-state-persist">就诊信息</button>
        </li>
        <li>
          <button>目标讨论</button>
        </li>
        <li>
          <button>任务选择</button>
        </li>
        <li>
          <button>开始计划</button>
        </li>
      </ul>
    </div>
  </div>
  <div data-role="content" data-theme="a">
    <div id="ClinicInfoContent" >
      <input id="AdmissionDateMark" name="AdmissionDateMark" type="hidden" value="1897-01-01 00:00:00" />
      <input id="ClinicDateMark" name="ClinicDateMark" type="hidden" value="1897-01-01 00:00:00" />
      <div id="norecord" style="display: none; margin-top: 20px;margin-bottom:40px;" align="center">
        <p style="font-size: 20px; color: Red;">还没有任何临床信息</p>
      </div>
      <div class="demo" id="demo" style="display: block;">
        <div class="history">
          <div class="history-date">
            <ul id="historyUl">
            </ul>
          </div>
        </div>
        <div id="history_loading" style="display: none; margin-top:0px" align="center"> <img alt="Load" src="img/history_loading.gif" style="width:50px;height:50px;" />
          <p>加载中，请稍后</p>
        </div>
        <div class="white" style="height: 10px; margin-top: 10px;"> </div>
        <!--<div id="historyButton">
                    <input type="button" style="width:800px;height:40px;" class="btn btn-primary" onclick="GetMoreClinic();" value="加载更多" />
                </div>--> 
      </div>
    </div>
    <div class="ui-grid-b">
      <div class="ui-block-a"> </div>
      <div class="ui-block-b" style="text-align:center;">
        <button class="ui-btn ui-btn-inline"  onclick="GetMoreClinic();" id="historyButton">加载更多</button>
        <button class="ui-btn ui-btn-inline" onclick="$.mobile.changePage('#SetTargetPage'); $.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">下一步</button>
        <!-- InsertCurSbp(); InsertCurDbp();函数合入InsertTarget中。getGoalValue()获取目标血压与当前血压的差值 ZC 20150511--> 
      </div>
      <div class="ui-block-c"> </div>
    </div>
  </div>
  <div data-role="panel" data-position="right" data-position-fixed="true" data-display="push" data-theme="a" id="ClinicInfoDetail-form">
    <div id="detailTitle" align="center">
      <h2 id = "DetailType"></h2>
    </div>
    <table cellpadding="3" style="margin-top:50px">
      <tr>
        <td width="10%" style="border: 0;"> 患者ID: </td>
        <td width="15%" style="border: 0;" id="PatientId"></td>
        <td width="10%" style="border: 0;"> 患者姓名: </td>
        <td id = "UserName" width="12%" style="border: 0;"></td>
        <td width="5%" style="border: 0;"> 日期: </td>
        <td id= "NowDate" width="12%" style="border: 0;"></td>
      </tr>
    </table>
    <table data-role="table" id="table-column-toggle" data-mode="columntoggle" data-column-btn-text="显示\隐藏" class="ui-responsive table-stroke">
      <thead id = "table-column-toggle-thead">
      </thead>
      <tbody id = "table-column-toggle-tbody">
      </tbody>
    </table>
    <br />
    <br />
    <table id="table-ClinicInfoDetailByType" class="dtypetable">
      <thead id = "table-ClinicInfoDetailByType-thead">
      </thead>
      <tbody id = "table-ClinicInfoDetailByType-tbody">
      </tbody>
    </table>
  </div>
</div>
<div data-role="page" id="SetTargetPage">
  <div data-role="header" data-position="fixed" data-theme="a" data-tap-toggle="false"> <a href="javascript: location.href='HomePage.html?';" data-icon="home" data-iconpos="notext" data-shadow="false" data-iconshadow="false">主页</a>
    <h1>创建计划</h1>
    
    <!--navbar -->
    <div data-role="navbar" >
      <ul>
        <li>
          <button>就诊信息</button>
        </li>
        <li>
          <button class="ui-btn-active ui-state-persist">目标讨论</button>
        </li>
        <li>
          <button>任务选择</button>
        </li>
        <li>
          <button>开始计划</button>
        </li>
      </ul>
    </div>
  </div>
  <div data-role="content" data-theme="a">
    <div class="ui-grid-b">
      <div class="ui-block-a">
        <h3 align="center">血压</h3>
        <div class="ui-grid-a">
          <div class="ui-block-a">
            <div  id="chart_SBP_1" style="float:left;margin-left:10px ; width: 150px; height: 300px;"></div>
          </div>
          <div class="ui-block-b">
            <div  id="chart_DBP_1" style="width: 150px; height: 300px;"></div>
          </div>
          <div data-role="fieldcontain" id="test1">
            <label style="width:50%">当前收缩压</label>
            <input  type="text" id="TextInput1" onkeyup="this.value=this.value.replace(/\D/g,'') ;GetDescription();SBPBar($('#TextInput1').val(), $('#TextInput3').val(), SBPlist, chart_SBP_1);RiskModify()" />
            <label style="width:50%">当前舒张压</label>
            </br>
            </br>
            <input type="text" id="TextInput2" onkeyup="this.value=this.value.replace(/\D/g,'') ;DBPBar($('#TextInput2').val(), $('#TextInput4').val(), DBPlist, chart_DBP_1);RiskModify()"/>
            </br>
            </br>
            </br>
            </br>
            </br>
          </div>
        </div>
      </div>
      <div class="ui-block-b">
        <h3 align="center">高血压等级说明</h3>
        <textarea data-role="none" id="hyperclass" name="" cols="" rows=""  readonly="readonly" ></textarea>
        <div data-role="fieldcontain" id="test2">
          <label style="width:50%">目标收缩压</label>
          <input type="text" id="TextInput3" onkeyup="this.value=this.value.replace(/\D/g,'') ;SBPBar($('#TextInput1').val(), $('#TextInput3').val(), SBPlist, chart_SBP_1)"/>
          <label style="width:50%">目标舒张压</label>
          </br>
          </br>
          <input type="text" id="TextInput4" onkeyup="this.value=this.value.replace(/\D/g,'') ;DBPBar($('#TextInput2').val(), $('#TextInput4').val(), DBPlist, chart_DBP_1)"/>
          </br>
          </br>
          </br>
          </br>
        </div>
      </div>
      <div class="ui-block-c">
        <h3 align="center">风险评估</h3>
        <!--        <div id="chartdiv3" style="width:300px; height:400px;"> </div>
-->
        <div id="chartdiv3" style="width:300px; height:400px;"> </div>
      </div>
    </div>
    <div class="ui-grid-b">
      <div class="ui-block-a"> </div>
      <div id="Targetbutton" class="ui-block-b" style="text-align:center;">
        <button class="ui-btn ui-btn-inline" onclick="$.mobile.changePage('#ClinicInfoPage');$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">上一步</button>
        <button class="ui-btn ui-btn-inline" onclick="if(InsertTarget()) {$.mobile.changePage('#CreatePlanPage');$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});}getGoalValue();">下一步</button>
        <!-- InsertCurSbp(); InsertCurDbp();函数合入InsertTarget中。getGoalValue()获取目标血压与当前血压的差值 ZC 20150511--> 
      </div>
      <div class="ui-block-c"> </div>
    </div>
  </div>
</div>
<div data-role="page" id="CreatePlanPage">
  <div data-role="header" data-position="fixed" data-theme="a" data-tap-toggle="false"> <a href="javascript: location.href='HomePage.html?';" data-icon="home" data-iconpos="notext" data-shadow="false" data-iconshadow="false">主页</a>
    <h1>创建计划</h1>
    <!--navbar -->
    <div data-role="navbar" >
      <ul>
        <li>
          <button>就诊信息</button>
        </li>
        <li>
          <button>目标讨论</button>
        </li>
        <li>
          <button class="ui-btn-active ui-state-persist">任务选择</button>
        </li>
        <li>
          <button>开始计划</button>
        </li>
      </ul>
    </div>
  </div>
  
  <!--content -->
  <div data-role="content" data-theme="a">
    <div id="CPPart1">
      <h4 style="color:#4BAACB">生活方式：</h4>
      <table data-role="table" class="ui-responsive table-stroke">
        <thead>
          <tr>
            <th></th>
            <th></th>
            <th>说明</th>
            <th>效果</th>
            <th>副作用</th>
          </tr>
        </thead>
        <tbody id="LifeStyleBody">
          <!--加载“生活方式” -->
        </tbody>
      </table>
      <div class="ui-grid-a">
        <div class="ui-block-a">
          <h4 id="drugTitle" style="color:#4BAACB">药物治疗：</h4>
        </div>
        <div class="ui-block-b" style="text-align: right"> <a href="#popupDrug" data-rel="popup" data-position-to="window" class="ui-btn ui-corner-all ui-btn-inline ui-icon-star ui-btn-icon-left" data-transition="pop" id="drugBtn">医嘱列表</a> </div>
      </div>
      <table data-role="table" class="ui-responsive table-stroke" id="DrugListTable">
        <!--加载“药物治疗” -->
      </table>
      <div id="LastDrugListDiv" style="height: 50px; color:#cb6c4b" > 
        <!--加载“过往药物治疗” --> 
      </div>
    </div>
    <div id="CPPart2">
      <p>生活方式</p>
      <h1 id="lifestyleChanges" style="color:#4BAACB">0mmHg</h1>
      <img src="img/plus.png" style="height: 24px; width: 24px;"/>
      <p>药物治疗</p>
      <h1 id="drugChanges"  style="color:#4BAACB">0mmHg</h1>
      <hr style="width:60%;"/>
      <p>距离目标</p>
      <h1 id="goal" style="color:#cb6c4b">0mmHg</h1>
    </div>
    <div class="ui-grid-b">
      <div class="ui-block-a"> </div>
      <div class="ui-block-b" style="text-align:center;">
        <button class="ui-btn ui-btn-inline" onclick="$.mobile.changePage('#SetTargetPage');$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">上一步</button>
        <button class="ui-btn ui-btn-inline" onclick="setPsTask();startPlanPageInit();$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">下一步</button>
        <!-- startPlanPageInit()开始计划页面初始化 ZC 2015-05-11--> 
      </div>
      <div class="ui-block-c"> </div>
    </div>
    <div data-role="popup" id="popupDrug" data-theme="a" class="ui-corner-all ui-content" data-dismissible="false"> <a href="#" data-rel="back" class="ui-btn ui-corner-all ui-shadow ui-btn-a ui-icon-delete ui-btn-icon-notext ui-btn-right">关闭</a>
      <h3 id="popupH3">该患者过往药嘱列表：</h3>
      <div id="popupDrugDiv"> 
        <!-- 药嘱列表--> 
      </div>
      <div class="ui-grid-a" id="divBtn">
        <div class="ui-block-a"><a href="#" data-rel="back" class="ui-btn ui-corner-all ui-btn-a">取 消</a></div>
        <div class="ui-block-b"><a href="#" data-rel="back" class="ui-btn ui-corner-all ui-btn-a" onclick="setPsDrug();">确 定</a></div>
      </div>
    </div>
  </div>
</div>
<div data-role="page" id="StartPlanPage">
  <div data-role="header" data-position="fixed" data-theme="a" data-tap-toggle="false"> <a href="javascript: location.href='HomePage.html?';" data-icon="home" data-iconpos="notext" data-shadow="false" data-iconshadow="false">主页</a>
    <h1>创建计划</h1>
    
    <!--navbar -->
    <div data-role="navbar" >
      <ul>
        <li>
          <button>就诊信息</button>
        </li>
        <li>
          <button>目标讨论</button>
        </li>
        <li>
          <button>任务选择</button>
        </li>
        <li>
          <button class="ui-btn-active ui-state-persist">开始计划</button>
        </li>
      </ul>
    </div>
  </div>
  
  <!--content --> 
  
  <!--<h1 align="center">开始计划</h1>-->
  <div data-role="content" data-theme="a">
    <div class="ui-grid-a">
      <div class="ui-block-a">
        <p align="center"><b>计划目标</b></p>
        <div style="float:left;width:65%">
                <div class="ui-grid-a">

          <div class="ui-block-a">
          <div id="chart_SBP_2" style="float:left;margin-left:10px ; width: 120px; height: 340px;"></div>
          </div>
          <div class="ui-block-b">
          <div id="chart_DBP_2" style="width: 120px; height: 340px;"></div>
          </div>
          </div>
        </div>
        <div style="float:right;width:35%;height:340px;">
          <div style="height:95px;">
            <div style="float:left;width:65%">
              <p align="center">初始收缩压</p>
            </div>
            <div style="float:left;width:25%">
              <p align="center">
                <input name="textarea" type="text" id="OSBP" readonly="true"/>
              </p>
            </div>
          </div>
          <div style="height:95px;">
            <div style="float:left;width:65%">
              <p align="center">目标收缩压</p>
            </div>
            <div style="float:left;width:25%">
              <p align="center">
                <input name="textarea" type="text" id="TSBP" readonly="true"/>
              </p>
            </div>
          </div>
          <div style="height:95px;">
            <div style="float:left;width:65%">
              <p align="center">初始舒张压</p>
            </div>
            <div style="float:left;width:25%">
              <p align="center">
                <input name="textarea" type="text" id="ODBP" readonly="true"/>
              </p>
            </div>
          </div>
          <div style="height:95px;">
            <div style="float:left;width:65%">
              <p align="center">目标舒张压</p>
            </div>
            <div style="float:left;width:25%">
              <p align="center">
                <input name="textarea" type="text" id="TDBP" readonly="true"/>
              </p>
            </div>
          </div>
        </div>
        <div style="float:left;width:33%">
          <p align="center">计划开始时间</p>
          <p align="center">结束日期设置</p>
        </div>
        <div style="float:left;width:33%">
          <p align="center" id="BeginDate"></p>
          <p align="center">
            <input name="textarea" id="EndDate" type="text" onclick="WdatePicker()" readonly="true"/>
          </p>
          <p align="center"; style="color:#FF0000" id="Alert"></p>
        </div>
        <!--      <div style="float:left;width:33%">
        <p align="center">
          <button id= "btnToStart" style="width:100px; height:40px;" onclick="$.mobile.changePage('#CreatePlanPage');$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">返回修改</button>
          <button id= "btnToStart" style="width:100px; height:40px;" onclick="btn1_listener_f()">确认开始</button>
        </p>
      </div>
--> 
      </div>
      <div class="ui-block-b">
        <p align="center"><b>计划任务</b></p>
        <table align="center" class="gridtable" id="PlanShow">
          <thead id="L0">
            <tr>
              <th><div align="center" style="width:80px;">编号</div></th>
              <th><div align="center" style="width:80px;">类型</div></th>
              <th><div align="center" style="width:80px;">任务名</div></th>
              <th><div align="center" style="width:185px;";>说明</div></th>
            </tr>
          </thead>
        </table>
      </div>
    </div>
    <div class="ui-grid-b">
      <div class="ui-block-a"> </div>
      <div class="ui-block-b" style="text-align:center;">
        <button id= "btnToStart"  class="ui-btn ui-btn-inline"  onclick="$.mobile.changePage('#CreatePlanPage');$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">返回修改</button>
        <button id= "btnToStart"  class="ui-btn ui-btn-inline" onclick="btn1_listener_f()">确认开始</button>
        <!--        <button class="ui-btn ui-btn-inline" onclick="$.mobile.changePage('#SetTargetPage');$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">上一步</button>
        <button class="ui-btn ui-btn-inline" onclick="setPsTask();startPlanPageInit();$.mobile.loading( 'show', {text: 'loading', textVisible: true, textonly: false,});">下一步</button>
--> <!-- startPlanPageInit()开始计划页面初始化 ZC 2015-05-11--> 
      </div>
      <div class="ui-block-c"> </div>
    </div>
  </div>
</div>
</body>
<script src="js/jquery-2.1.3.js" type="text/javascript"></script>
<script src="js/jquery.mobile-1.4.2.js" type="text/javascript"></script>
<script src="js/jquery-ui-1.7.2.custom.min.js" type="text/javascript"></script>
<script src="js/amcharts.js" type="text/javascript"></script>
<script src="js/serial.js" type="text/javascript"></script>
<script src="js/jquery.chromatable.js" type="text/javascript"></script>
<script src="js/WdatePicker.js"></script>
<script type="text/javascript" src="js/CommonUtility.js"></script>
<script type="text/javascript">
//Loading 

  var SBPlist = new Array();
  var DBPlist = new Array();
  var Tasklist = new Array();
  var bpi = 0;
  var lifeChanges = 0;
  var drugChanges = 0;
  var target = 0;
  var toTarget = 0; //距离目标多少mmHg
  var evaluate={};
  /*
//Loading show

$(document).on("pagehide", "#ClinicInfoPage", function(){

console.log("pagehide");
$.mobile.loading( "show", {text: 'loading', textVisible: true, textonly: false});
});
*/

	//Loading hide
$(document).on("pageshow", "#ClinicInfoPage", function(){

console.log("pageshow");
$.mobile.loading( "hide" ); 
});

$(document).on("pageshow", "#SetTargetPage", function(){

$.mobile.loading( "hide" ); 
});


$(document).on("pageshow", "#CreatePlanPage", function(){

$.mobile.loading( "hide" ); 
});

$(document).on("pageshow", "#StartPlanPage", function(){

$.mobile.loading( "hide" ); 
});


  //ClinicInfoPage自运行
  $(document).on("pageinit", "#ClinicInfoPage", function(){

	 /*localStorage.setItem('UserId', 'D003');
	  localStorage.setItem('TerminalName', 'ZC-PC');
	  localStorage.setItem('TerminalIP', '10.12.43.94');
	  localStorage.setItem('DeviceType', 0);
	  //localStorage.setItem('PatientId','PID201501070026');
      localStorage.setItem('PatientId', 'PID201501070003');
      localStorage.setItem('NewPlanNo', 'P0002');
	  localStorage.setItem('PlanNo', 'PLN201504280012');
	  localStorage.setItem('ModuleType', 'M1');
	  localStorage.setItem('PLType', '1');*/
	  
	  $("#PatientId").text(localStorage.getItem('PatientId'));
	  
	  L = GetMoreClinic();
	  if(L > 0){
		  var target = document.getElementById("demo");
		  target.style.display = "block";
		  var target = document.getElementById("norecord");
		  target.style.display = "none";
      }
	  else{
		  var target = document.getElementById("demo");
		  target.style.display = "none";
		  var target = document.getElementById("norecord");
		  target.style.display = "block";
      }
  });
  
  //SetTargetPage自运行
  $(document).on("pageinit", "#SetTargetPage", function(){
    if (localStorage.getItem('EditEnable') == 0) {
      $('#Targetbutton').css('display','none');
      //console.log('targetPage');
    }
	  $("#TextInput1").css("width","80px").parent().css("width","80px");
	  $("#TextInput2").css("width","80px").parent().css("width","80px");
	  $("#TextInput3").css("width","80px").parent().css("width","80px");
	  $("#TextInput4").css("width","80px").parent().css("width","80px");
	  //先对NewPlanNo置为空，以对“下一步”按钮点击状态进行判断 ZC 2015-05-07
	  localStorage.setItem('NewPlanNo', "");
	  //读取血压值，包括当前和前一个计划的目标
	  GetCurrentSBP(localStorage.getItem('PatientId'));
	  GetCurrentDBP(localStorage.getItem('PatientId'));
	  
	  GetTargetSBP(localStorage.getItem('PLType'), localStorage.getItem('PlanNo'), "1");
	  GetTargetDBP(localStorage.getItem('PLType'), localStorage.getItem('PlanNo'), "2");
	  GetBPGrades();
	   setTimeout(function(){
		  SBPBar($("#TextInput1").val(), $("#TextInput3").val(), SBPlist, chart_SBP_1);
		  },0);
	   setTimeout(function(){
		  DBPBar($("#TextInput2").val(), $("#TextInput4").val(), DBPlist, chart_DBP_1);
		  },0);
	   setTimeout(function(){
		  Risk();
		  },0); 
  });
  
  //CreatePlanPage自运行
  $(document).on("pageinit", "#CreatePlanPage", function(){ 
      //当PlanNo状态为暂存时，把NewPlanNo=PlanNo，只要PLType不变，则不影响页面逻辑
      if(localStorage.getItem('PLType') == 1){
		localStorage.setItem('NewPlanNo', localStorage.getItem('PlanNo'));  
	  }
      getGoalValue(); 
	  loadLifeStyle();	
	  loadLastLifeStyle();
	  getPatientDrugRecord(); //获取患者的药嘱列表
      loadDrugList();  //加载以往的“药物治疗”记录
  });
   
  //StartPlanPage自运行
  $(document).on("pageinit", "#StartPlanPage", function(){ 
  	  $("#PlanShow").chromatable({		//任务显示滚动(表头不滚动)
		  width: "495px",
		  height: "450px",
		  scrolling: "yes",	
	  });
  });
 
  //“开始计划”页面初始化 
  function startPlanPageInit(){
	  GetPsTask(localStorage.getItem('NewPlanNo'));
	  GetPsTarget(localStorage.getItem('NewPlanNo'));
	
      GetBPGrades();
	  setTimeout(function(){
		  SBPBar($("#OSBP").val(),$("#TSBP").val(),SBPlist,chart_SBP_2);
		  },200);
	  setTimeout(function(){
		  DBPBar($("#ODBP").val(),$("#TDBP").val(),DBPlist,chart_DBP_2);
		  },200);
  
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetServerTime',
		  async:false,
		  data: {},
		  beforeSend: function(){},
		  success: function(result) {
		  	  $("#BeginDate").html($(result).text().slice(0,10));	    
		  }, 
		  error: function(msg) {alert("Error!");}
	  });	   
  }
  
  function trim(str) {  //删除左右两端的空格
      return str.replace(/(^\s*)|(\s*$)/g, "");
  } 
  
  //获取患者就诊信息 WF
  function GetMoreClinic() {
	  var length=0;
	  var target = document.getElementById("history_loading");
	  target.style.display = "block";
	  $("#historyButton").hide();

	  var admissionDateMark = document.getElementById("AdmissionDateMark").value;
	  var clinicDateMark = document.getElementById("ClinicDateMark").value;

	  $.ajax({

		  url:  'http://'+serverIP+'/'+serviceName+'/GetClinicalNewMobile',
		  type: "GET",
		  dataType: "json",
		  async: false,
		  data: { UserId: localStorage.getItem('PatientId'), AdmissionDate: admissionDateMark, ClinicDate: clinicDateMark, Num: 10 },
		  success: function (res) {

			  var target = document.getElementById("history_loading");
			  target.style.display = "none";

			  document.getElementById("AdmissionDateMark").value = res.AdmissionDateMark;  
			  document.getElementById("ClinicDateMark").value = res.ClinicDateMark;

				  length=res.History.length;
				  if (res.History.length > 0) {
					  var str = '';
					  for (var i = 0; i < res.History.length; i++) {
						  str += '<li><h3>' + res.History[i].Time + '</h3> <div class="cbp_tmlabel" id="' + res.History[i].Color + '">';
						  str += '<span class="tag-' + res.History[i].Color + '">' + res.History[i].Tag + '</span>  ';
					 
						  for (var j = 0; j < res.History[i].ItemGroup.length; j++) {
							  if ((res.History[i].ItemGroup[j].Type == "入院") || (res.History[i].ItemGroup[j].Type == "出院") || (res.History[i].ItemGroup[j].Type == "门诊") || (res.History[i].ItemGroup[j].Type == "急诊") || (res.History[i].ItemGroup[j].Type == "当前住院中") || (res.History[i].ItemGroup[j].Type == "转科")) {
								  str += ' <p class="Item" id="">' + res.History[i].ItemGroup[j].Time + '<span style="margin-left:20px;">' + res.History[i].ItemGroup[j].Event + '</span></p>';
							  }
							  else {
							  str += '<p><a href="#ClinicInfoDetail-form"  class="Itemhref" id=' + res.History[i].ItemGroup[j].KeyCode +' onclick="OpenClinicInfoDetail(this.id);">' + res.History[i].ItemGroup[j].Time + '&nbsp;&nbsp;' + res.History[i].ItemGroup[j].Event + '</a></p>';
							  }
						  }
						  str += '</li>';
					  }
					  $("#historyUl").append(str);
					  $("#historyButton").show();
				  }
				  
				  else {
					  $("#historyButton").hide();
		
				  }

			  }

	  });

	  return length;
  }

  function OpenClinicInfoDetail(keycode) {

	  var keycode_split=keycode.split("|",3);
	  var Type = keycode_split[0];
	  var VisitId = keycode_split[1];
	  var DateT = keycode_split[2];
	  var TypeStr="类别："
	  document.getElementById("table-column-toggle-tbody").innerHTML="";
	  document.getElementById("table-ClinicInfoDetailByType-thead").innerHTML="";
	  document.getElementById("table-ClinicInfoDetailByType-tbody").innerHTML="";
	  if(Type=="DrugRecord")
	  {
		  TypeStr+="用药信息";
		  document.getElementById("table-column-toggle-thead").innerHTML="<tr><th data-priority='1'>长期医嘱标志</th><th data-priority='2'>药嘱类别</th><th>药嘱内容</th><th data-priority='4'>药品一次使用剂量</th><th data-priority='5'>剂量单位</th><th data-priority='6'>给药途径</th><th data-priority='7'>开始时间</th><th data-priority='8'>结束时间</th><th data-priority='9'>执行频率描述</th></tr>";
			   
	  }
	  else if(Type=="DiagnosisInfo")
	  {
		  TypeStr+="诊断信息";
		  document.getElementById("table-column-toggle-thead").innerHTML="<tr><th data-priority='1'>诊断类型</th><th data-priority='2'>诊断种类</th><th>诊断名称</th><th data-priority='4'>描述</th><th  data-priority='5'>记录时间</th></tr>";
	  }
	  else if(Type=="ExaminationInfo")
	  {
		  TypeStr+="检查信息";
		  document.getElementById("table-column-toggle-thead").innerHTML="<tr><th data-priority='1'>检查类型</th><th data-priority='2'>检查日期</th><th>检查项目名称</th><th data-priority='4'>检查参数</th><th data-priority='5'>检查所见</th><th data-priority='6'>印象</th><th data-priority='7'>建议</th><th data-priority='8'>是否阳性</th><th data-priority='9'>检查结果状态</th><th data-priority='10'>报告日期</th><th data-priority='11'>图像地址</th><th data-priority='12'>具体参数</th></tr>";
	  }
	  else
	  {
		  TypeStr+="化验信息";
		  document.getElementById("table-column-toggle-thead").innerHTML="<tr><th data-priority='1'>化验类型</th><th>化验项目名称</th><th data-priority='6'>化验日期</th><th data-priority='4'>化验结果状态</th><th data-priority='5'>报告日期</th><th data-priority='3'>具体参数</th></tr>";
	  }
	  document.getElementById("DetailType").innerHTML=TypeStr;
	  document.getElementById("NowDate").innerHTML=DateT.substr(0,10);
	  
		  
	  $.ajax({
		  url:  'http://'+serverIP+'/'+serviceName+'/GetPatBasicInfo',
		  type: "GET",
		  dataType: "xml",
		  async: false,
		  data: { UserId: localStorage.getItem('PatientId')},
		  success: function (res) {
			  
				  document.getElementById("UserName").innerHTML=$(res).find('UserName').text();

		  }
	  });
	  
	  
	  $.ajax({
		  url:  'http://'+serverIP+'/'+serviceName+'/GetClinicInfoDetail',
		  type: "GET",
		  dataType: "xml",
		  async: false,
		  data: { UserId: localStorage.getItem('PatientId'), Type: Type, VisitId: VisitId, Date: DateT },
		  success: function (res) {
			  
				  $(res).find('Table1').each(function() {
					  
					  
					  if(Type=="DrugRecord")
					  {
						  
						  var RepeatIndicator=$(this).find("RepeatIndicator").text();
						  var OrderClass=$(this).find("OrderClass").text();
						  var OrderContent=$(this).find("OrderContent").text();
						  var Dosage=$(this).find("Dosage").text();
						  var DosageUnits=$(this).find("DosageUnits").text();
						  var Administration=$(this).find("Administration").text();
						  var StartDateTime=$(this).find("StartDateTime").text();
						  var StopDateTime=$(this).find("StopDateTime").text();
						  var Frequency=$(this).find("Frequency").text();
		  
						  var trcontent="<tr><td>"+RepeatIndicator+"</td><td>"+OrderClass+"</td><td>"+OrderContent+"</td><td>"+Dosage+"</td><td>"+DosageUnits+"</td><td>"+Administration+"</td><td>"+StartDateTime+"</td><td>"+StopDateTime+"</td><td>"+Frequency+"</td></tr>";
					  
						  $("#table-column-toggle-tbody").append(trcontent);
					  }
					  
					  else if(Type=="DiagnosisInfo")
					  {
						  
						  var DiagnosisTypeName=$(this).find("DiagnosisTypeName").text();
						  var TypeName=$(this).find("TypeName").text();
						  var DiagnosisName=$(this).find("DiagnosisName").text();
						  var Description=$(this).find("Description").text();
						  var RecordDateShow=$(this).find("RecordDateShow").text();
						  var trcontent= "<tr><td>"+DiagnosisTypeName+"</td><td>"+TypeName+"</td><td>"+DiagnosisName+"</td><td>"+Description+"</td><td>"+RecordDateShow+"</td></tr>";
						  $("#table-column-toggle-tbody").append(trcontent);
						  
					  }
					  
					  else if(Type=="ExaminationInfo")
					  {
						  var ExamTypeName=$(this).find("ExamTypeName").text();
						  var ExamDate=$(this).find("ExamDate").text();
						  var ItemName=$(this).find("ItemName").text();
						  var ExamPara=$(this).find("ExamPara").text();
						  var Description=$(this).find("Description").text();
						  var Impression=$(this).find("Impression").text();
						  var Recommendation=$(this).find("Recommendation").text();
						  var IsAbnormal=$(this).find("IsAbnormal").text();
						  var Status=$(this).find("Status").text();
						  var ReportDate=$(this).find("ReportDate").text();
						  var ImageURL=$(this).find("ImageURL").text();
						  var SortNo=$(this).find("SortNo").text();
						  var ItemCode=$(this).find("ItemCode").text();
						  
						 var trcontent="<tr><td>"+ExamTypeName+"</td><td>"+ExamDate+"</td><td>"+ItemName+"</td><td>"+ExamPara+"</td><td>"+Description+"</td><td>"+Impression+"</td><td>"+Recommendation+"</td><td>"+IsAbnormal+"</td><td>"+Status+"</td><td>"+ReportDate+"</td><td>"+ImageURL+"</td><td id='ClinicInfoDetailByType-ExaminationInfo'><a id = "+localStorage.getItem('PatientId')+"|"+VisitId+"|"+SortNo+"|"+ItemCode+' onclick="OpenClinicInfoDetailExam(this.id);">详细</a></td></tr>';
			  
						  $("#table-column-toggle-tbody").append(trcontent);
					  }
					  
					  else if(Type=="LabTestInfo")
					  {
						  var LabItemTypeName=$(this).find("LabItemTypeName").text();
						  var LabItemName=$(this).find("LabItemName").text();
						  var LabTestDate=$(this).find("LabTestDate").text();
						  var Status=$(this).find("Status").text();
						  var ReportDate=$(this).find("ReportDate").text();
						  var SortNo=$(this).find("SortNo").text();
						  var LabItemCode=$(this).find("LabItemCode").text();
						  var trcontent="<tr><td>"+LabItemTypeName+"</td><td>"+LabItemName+"</td><td>"+LabTestDate+"</td><td>"+Status+"</td><td>"+ReportDate+"</td><td id='ClinicInfoDetailByType-LabTestInfo'><a id = "+localStorage.getItem('PatientId')+"|"+VisitId+"|"+SortNo+"|"+LabItemCode+' onclick="OpenClinicInfoDetailLab(this.id);">详细</a></td></tr>';

						  $("#table-column-toggle-tbody").append(trcontent);
					  }
					  else
					  {
						  alert("Wrong Type!");
					  }
						  
				  }); 
			  }
		  });
	  $("#table-column-toggle").table("refresh");
	  $( "#ClinicInfoDetail-form" ).trigger( "updatelayout" );
  }
  
  
  
  function OpenClinicInfoDetailExam(TypeId) {

	  var TypeId_split=TypeId.split("|",4);
	  var UserId = TypeId_split[0];
	  var VisitId = TypeId_split[1];
	  var SortNo = TypeId_split[2];
	  var ItemCode = TypeId_split[3];
	  
	  document.getElementById("table-ClinicInfoDetailByType-tbody").innerHTML="";
	  document.getElementById("table-ClinicInfoDetailByType-thead").innerHTML="<tr><td>参数编码名称</td><td>参数值</td><td>单位</td><td>是否正常</td></tr>";
	  
	  
	  $.ajax({
		  url:  'http://'+serverIP+'/'+serviceName+'/GetExamDtlList',
		  type: "GET",
		  dataType: "xml",
		  async: false,
		  data: { UserId: UserId, VisitId: VisitId, SortNo: SortNo, ItemCode: ItemCode },
		  success: function (res) {
			  
			  $(res).find('Table1').each(function() {
					  
				  var Name=$(this).find("Name").text();
				  var Value=$(this).find("Value").text();
				  var Unit=$(this).find("Unit").text();
				  var IsAbnormal=$(this).find("IsAbnormal").text();
					  
				  var trcontent="<tr><td>"+Name+"</td><td>"+Value+"</td><td>"+Unit+"</td><td>"+IsAbnormal+"</td></tr>";

				  $("#table-ClinicInfoDetailByType-tbody").append(trcontent);
					  
			  }); 
		  }
	  });
	  $("#table-ClinicInfoDetailByType").table("refresh");
	  $( "#ClinicInfoDetail-form" ).trigger( "updatelayout" );
  }
  
  function OpenClinicInfoDetailLab(TypeId) {

	  var TypeId_split=TypeId.split("|",4);
	  var UserId = TypeId_split[0];
	  var VisitId = TypeId_split[1];
	  var SortNo = TypeId_split[2];
	  var ItemCode = TypeId_split[3];
	  
	  document.getElementById("table-ClinicInfoDetailByType-tbody").innerHTML="";
	  document.getElementById("table-ClinicInfoDetailByType-thead").innerHTML="<tr><td>参数名称</td><td>参数值</td><td>单位</td><td>是否正常</td></tr>";
	  
	  
	  $.ajax({
		  url:  'http://'+serverIP+'/'+serviceName+'/GetLabTestDtlList',
		  type: "GET",
		  dataType: "xml",
		  async: false,
		  data: { UserId: UserId, VisitId: VisitId, SortNo: SortNo, ItemCode: ItemCode },
		  success: function (res) {
			  
				  $(res).find('Table1').each(function() {
					  
						  var Name=$(this).find("Name").text();
						  var Value=$(this).find("Value").text();
						  var Unit=$(this).find("Unit").text();
						  var IsAbnormal=$(this).find("IsAbnormal").text();
					  
						  var trcontent="<tr><td>"+Name+"</td><td>"+Value+"</td><td>"+Unit+"</td><td>"+IsAbnormal+"</td></tr>";

					  
						  $("#table-ClinicInfoDetailByType-tbody").append(trcontent);
				  }); 
			  }
		  });
	  $("#table-ClinicInfoDetailByType").table("refresh");
	  $( "#ClinicInfoDetail-form" ).trigger( "updatelayout" );
  }
  
  //从数据库中读取用户当前收缩压值
  function GetCurrentSBP(PatientId){
	 //alert(PatientId);
      var option = "";
	  $.ajax({  
		type: "POST",
		dataType: "xml",
		timeout: 30000,  
		url: 'http://'+ serverIP +'/'+serviceName+'/GetLatestSbpByPatientId',
		async:false,
		data: {PatientId:PatientId,
			   ItemType:"Bloodpressure",
			   ItemCode:"Bloodpressure_1"},//输入变量
		beforeSend: function(){},
		success: function(result) { 
			 //存在收缩压的值，则直接读取
			option=$(result).text();
			if (option != "")
			{
				$("#TextInput1").val(option);
				var SBP = option;
				GetDescription(SBP);
			}
			else 
			{
				//$("#TextInput1").val("请输入");
				$("#TextInput1").attr("placeholder","请输入");

			}					    
	    }, 
	    error: function(msg) {alert("Get Current Sbp Error!");}
	  });
      return option;	
  }	 
  //从数据库中读取用户当前舒张压值
  function GetCurrentDBP(PatientId){
	  var option;
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetLatestDbpByPatientId',
		  async:false,
		  data: {PatientId:PatientId,
				 ItemType:"Bloodpressure",
				 ItemCode:"Bloodpressure_2"},//输入变量
		  beforeSend: function(){},
		  success: function(result) { 
			  option=$(result).text();
			  if (option != "")
			  {
				  $("#TextInput2").val(option);
			  }
			  else 
			  {
				$("#TextInput2").attr("placeholder","请输入");
			  }		    
		  }, 
		  error: function(msg) {alert("Get Current Dbp Error!");}
	  });
	  return option;	
  } 
   
  //从数据库中读取用户前一个计划的目标收缩压值
  function GetTargetSBP(PLType, PlanNo, Id){
	  var option;
	  if(PLType == 1 || PLType == 4)
	  {
		  $.ajax({  
			  type: "POST",
			  dataType: "xml",
			  timeout: 30000,  
			  url: 'http://'+ serverIP +'/'+serviceName+'/GetValueByPlanNoAndId',
			  async:false,
			  data: {PlanNo:PlanNo,
					 Id:Id},//输入变量
			  beforeSend: function(){},
			  success: function(result) { 
				  option=$(result).text();
				  if (option != "")
				  {
					  $("#TextInput3").val(option);
				  }
				  else 
				  {
				$("#TextInput3").attr("placeholder","请输入");
				  }		    
			  }, 
			  error: function(msg) {alert("Get Target Sbp Error!");}
		  });
		  return option;	
	  }
  } 
  
  //从数据库中读取用户前一个计划的目标舒张压值
  function GetTargetDBP(PLType, PlanNo, Id){
	  var option;
	  if(PLType == 1 || PLType == 4)
	  {
		  $.ajax({  
			  type: "POST",
			  dataType: "xml",
			  timeout: 30000,  
			  url: 'http://'+ serverIP +'/'+serviceName+'/GetValueByPlanNoAndId',
			  async:false,
			  data: {PlanNo:PlanNo,
					 Id:Id},//输入变量
			  beforeSend: function(){},
			  success: function(result) { 
				  option=$(result).text();
				  if (option != "")
				  {
					  $("#TextInput4").val(option);
				  }
				  else 
				  {
				$("#TextInput4").attr("placeholder","请输入");
				  }		    
			  }, 
			  error: function(msg) {alert("Get Target Dbp Error!");}
		  });
		  return option;	
	  }
  } 
  //从数据库中获取血压等级说明表的信息，Cm.MstBloodPressure
  function GetBPGrades(){  
	 $.ajax({ 
         type: "POST",
         dataType: "xml",
		 timeout: 30000,  
		 url: 'http://'+ serverIP +'/'+serviceName+'/GetBPGrades',
		 async:false,
		 beforeSend: function(){},
         success: function(result) {  				  
			 $(result).find('MstBloodPressure').each(function() {
				     SBPlist[bpi]=$(this).find("SBP").text();
				     DBPlist[bpi]=$(this).find("DBP").text();
					  //alert(SBPlist[bpi]);
					 bpi=bpi+1;		
			 }); 
			 //alert(DBPlist);
         },
         error: function(msg) {alert("Error!");}
     }); 			
  }
  
  //获取血压等级说明，进入页面能够自动读取当前血压值的时候加载，在修改当前血压值后点击保存后也加载
  function GetDescription(SBP){
	  var SBP=$("#TextInput1").val();
	  var option;
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetDescription',
		  async:false,
		  data: {SBP:SBP,
				},//输入变量
		  beforeSend: function(){},
		  success: function(result) { 
			  option=$(result).text();
			  if (option != "")
			  {
				  $("#hyperclass").val(option);
			  }
			  else 
			  {
				  alert("get description error")
			  }		    
		  }, 
		  error: function(msg) {}
	  });
	  return option;	
  }   
  
  //收缩压图	
  function SBPBar(a, b, SBPlist, chart_SBP_1){
	  if(a=="")
	  {
		a=0;
	  }
	  if(b=="")
	  {
		b=0;
	  }
	  var chart;
	  var chartData = [
		  {
			  
			  "category": "收缩压",
			  "excelent": SBPlist[1],
			  "good": SBPlist[2]-SBPlist[1],
			  "average": SBPlist[3]-SBPlist[2],
			  "poor": SBPlist[4]-SBPlist[3],
			  "bad": SBPlist[5]-SBPlist[4],
			  "limit1": a,			
			  "limit2": b,
		  }
	  ];	
	  chart = new AmCharts.AmSerialChart();
	  chart.dataProvider = chartData;
	  chart.categoryField = "category";
	  chart.rotate = false; // if you want vertical bullet chart, set rotate to false
	  chart.columnWidth = 1;//色条宽度
	  chart.startDuration = 0;//点直接显示，不用跳来跳去
	  
	  var categoryAxis = chart.categoryAxis;
	  categoryAxis.gridAlpha = 0;//点直接显示
	  categoryAxis.axisAlpha = 0;
	  //categoryAxis.labelRotation = 90;
	  var valueAxis = new AmCharts.ValueAxis();
	  valueAxis.maximum = SBPlist[SBPlist.length-1];
	  valueAxis.minimum = parseInt(SBPlist[0]);
	  
	  valueAxis.axisAlpha=0;
	  valueAxis.axiscolor="#FF0000";
	  valueAxis.gridAlpha = 0;
	  valueAxis.stackType = "regular"; // we use stacked graphs to make color fills
	  chart.addValueAxis(valueAxis);
  
	  // this graph displays the short dash, which usually indicates maximum value reached.
	  var graph1 = new AmCharts.AmGraph();
	  graph1.valueField="limit1";
	  graph1.lineColor = "#FF0000";
	  graph1.bullet="round";
	  graph1.noStepRisers = true;
	  graph1.lineAlpha = 1;
	  graph1.lineThickness = 3;
	  graph1.columnWidth = 0.5; // change this if you want wider dash
	  graph1.stackable = false; // this graph shouldn't be stacked
	  graph1.labelText = "当前";
	  chart.addGraph(graph1);
	  
	  var graph2 = new AmCharts.AmGraph();
	  graph2.valueField="limit2";
	  graph2.lineColor = "#3333FF";
	  graph2.bullet="diamond";
	  graph2.noStepRisers = true;
	  graph2.lineAlpha = 1;
	  graph2.lineThickness = 3;
	  graph2.columnWidth = 0.5; // change this if you want wider dash
	  graph2.stackable = false; // this graph shouldn't be stacked
	  graph2.labelText = "目标";
	  graph2.labelPosition = "bottom";
	  chart.addGraph(graph2);			
	  // The following graphs produce color bands色条的不同颜色
	  var field=new Array("excelent","good","average","poor","bad");
	  var color=new Array("#19d228","#b4dd1e","#f6d32b","#fb7116");
	  
	  for(var q=0;q<=field.length;q++){
		  graph = new AmCharts.AmGraph();
		  graph.valueField = field[q];
		  graph.lineColor = color[q];
		  graph.showBalloon = false;
		  graph.type = "column";
		  graph.fillAlphas = 0.8;
		  chart.addGraph(graph);
	  };
	  
	  // WRITE
	  chart.write(chart_SBP_1);
  } 
  //舒张压图
  function DBPBar(c, d, SBPlist, chart_DBP_1){
	  var c=$("#TextInput2").val();
	  var d=$("#TextInput4").val();
	  if(c=="")
	  {
		c=0;
	  }
	  if(d=="")
	  {
		d=0;
	  }
	  var chart1;
	  var chart1Data = [
		  {   
			  
			  "category": "舒张压",
			  "excelent": DBPlist[1],
			  "good": DBPlist[2]-DBPlist[1],
			  "average": DBPlist[3]-DBPlist[2],
			  "poor": DBPlist[4]-DBPlist[3],
			  "bad": DBPlist[5]-DBPlist[4],
			  "limit1": c,
			  "limit2": d,
		  }
	  ];
	  
	  chart1 = new AmCharts.AmSerialChart();
	  chart1.dataProvider = chart1Data;
	  chart1.categoryField = "category";
	  chart1.rotate = false; // if you want vertical bullet chart, set rotate to false
	  chart1.columnWidth = 1;
	  chart1.startDuration = 0;
  
	  var categoryAxis = chart1.categoryAxis;
	  categoryAxis.gridAlpha = 0;
	  categoryAxis.axisAlpha = 0;
	  var valueAxis = new AmCharts.ValueAxis();
	  valueAxis.maximum = DBPlist[DBPlist.length-1];
	  valueAxis.minimum = parseInt(DBPlist[0]);
	  valueAxis.axisAlpha = 0;
	  valueAxis.gridAlpha = 0;
	  
	  valueAxis.stackType = "regular"; // we use stacked graphs to make color fills
	  chart1.addValueAxis(valueAxis);
  
	  // this graph displays the short dash, which usually indicates maximum value reached.
	  var graph1 = new AmCharts.AmGraph();
	  graph1.valueField = "limit1";
	  graph1.lineColor = "#FF0000";
	  graph1.bullet="round";
	  // it's a step line with no risers
	  //graph.type = "step";
	  graph1.noStepRisers = true;
	  graph1.lineAlpha = 1;
	  graph1.lineThickness = 3;
	  graph1.columnWidth = 0.5; // change this if you want wider dash
	  graph1.stackable = false; // this graph shouldn't be stacked
	  graph1.labelText = "当前";
	  chart1.addGraph(graph1);
	  
	  var graph2 = new AmCharts.AmGraph();
	  graph2.valueField = "limit2";
	  graph2.lineColor = "#3333FF";
	  graph2.bullet="diamond";
	  // it's a step line with no risers
	  //graph.type = "step";
	  graph2.noStepRisers = true;
	  graph2.lineAlpha = 1;
	  graph2.lineThickness = 3;
	  graph2.columnWidth = 0.5; // change this if you want wider dash
	  graph2.stackable = false; // this graph shouldn't be stacked
	  graph2.labelText = "目标";
	  graph2.labelPosition = "bottom";
	  chart1.addGraph(graph2);
  
	  // The following graphs produce color bands色条的不同颜色
	  var field=new Array("excelent","good","average","poor","bad");
	  var color=new Array("#19d228","#b4dd1e","#f6d32b","#fb7116");
	  
	  for(var q=0;q<=field.length;q++){
	  graph = new AmCharts.AmGraph();
	  graph.valueField = field[q];
	  graph.lineColor = color[q];
	  graph.showBalloon = false;
	  graph.type = "column";
	  graph.fillAlphas = 0.8;
	  chart1.addGraph(graph);
	  };
  
	  chart1.write(chart_DBP_1);	
  }
    
//页面加载后生成风险评估图
function Risk()
  {
	  var PatientId=localStorage.getItem('PatientId');
	 // PatientId = "PID201501070003";
	  var Hyper="";
	  var Harvard="";
	  var Framingham="";
	  var Stroke="";
	  var Heart="";
	  GetHypertension(PatientId);
	  GetHarvardRisk(PatientId);
	  GetFramingham(PatientId);
	  GetStroke(PatientId);
	  GetHeartFailure(PatientId);
	  RiskBar(Hyper,Harvard,Framingham,Stroke,Heart);

      //高血压
      function GetHypertension(PatientId)
	  {
		  
		//alert("1");
		//PatientId = localStorage.getItem('PatientId');
		//alert(PatientId); 	  	
	 	 $.ajax
	 	 ({  	 	
          	type: "POST",
          	dataType: "xml",
		  	timeout: 30000,  
			//url: 'http://'+serverIP+ '/' +serviceName+'/GetHypertension',
		  	url: 'http://'+ serverIP +'/'+serviceName+'/GetHypertension',
		  	async:false,
          	data: {UserId:PatientId},//输入变量
		  	beforeSend: function(){},
          	success: function(result) 
		 	{ 
				//alert("1");
				
			   Hyper=$(result).text();
			   Hyper=Hyper.split("||");
			   var RiskInfactor=parseFloat(Hyper[0]); 
			   evaluate.RiskInfactor1=RiskInfactor;
			   var Age = Hyper[1];
			   evaluate.Age=Age;
			   var SBP=$('#TextInput1').val();
			   var DBP=$('#TextInput2').val();
			   RiskInfactor=RiskInfactor- 0.05933 * SBP - 0.12847 * DBP+ 0.00162 * Age*DBP;
			   //alert(RiskInfactor);
			   Hyper = 1-Math.exp(-Math.exp(((Math.log(Math.E,4))- (22.94954+ RiskInfactor))/0.87692));
			   //alert(Hyper);
			   //alert(RiskInfactor+1.5);
			   //alert(Age);
          	}, 
            error: function(msg) {alert("请输入相关参数");}
     	 });
		 //alert(Hyper);
	  	 return Hyper;
		 
		 //alert("1");
	  }
	  
    //五年危险率
    function GetHarvardRisk(PatientId)
	{  
	  $.ajax
	  ({  
          type: "POST",
          dataType: "xml",
		  timeout: 30000,  
		  //url: 'http://'+ 'localhost:48401/' +servicename+'/GetHarvardRisk',
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetHarvardRisk',
		  async:false,
          data: {UserId:PatientId},//输入变量
		  beforeSend: function(){},
          success: function(result) 
		  { 
			 Harvard=$(result).text();	
			 Harvard=Harvard.split("||");
			 var RiskInfactor=parseInt(Harvard[0]); 
			 evaluate.RiskInfactor2=RiskInfactor;
			 var Gender = Hyper[1];//0,2女，其他男，可以调
			 evaluate.Gender=Gender;
			 var SBP=$('#TextInput1').val();
			 //不同性别SBP的影响因素
			 if (Gender==1)
			 {
				     if (SBP <= 119)
                     {
                         RiskInfactor = RiskInfactor + 0;
                     }
                     else if (SBP >= 120 && SBP <= 129)
                     {
                         RiskInfactor = RiskInfactor + 1;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 140 && SBP <= 149)
                     {
                         RiskInfactor = RiskInfactor + 3;
                     }
                     else if (SBP >= 150 && SBP <= 159)
                     {
                         RiskInfactor = RiskInfactor + 4;
                     }
                     else if (SBP >= 160 && SBP <= 169)
                     {
                         RiskInfactor = RiskInfactor + 5;
                     }
                     else if (SBP >= 170 && SBP <= 179)
                     {
                         RiskInfactor = RiskInfactor + 6;
                     }
                     else if (SBP >= 180 && SBP <= 189)
                     {
                         RiskInfactor = RiskInfactor + 8;
                     }
                     else if (SBP >= 190 && SBP <= 199)
                     {
                         RiskInfactor = RiskInfactor + 9;
                     }
                     else if (SBP >= 200 && SBP <= 209)
                     {
                         RiskInfactor = RiskInfactor + 10;
                     }
                     else
                     {
                         RiskInfactor = RiskInfactor + 11;
                     }	 
			 }
			 else
			 {
				                     if (SBP <= 119)
                     {
                         RiskInfactor = RiskInfactor + 0;
                     }
                     else if (SBP >= 120 && SBP <= 129)
                     {
                         RiskInfactor = RiskInfactor + 1;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 140 && SBP <= 149)
                     {
                         RiskInfactor = RiskInfactor + 3;
                     }
                     else if (SBP >= 150 && SBP <= 159)
                     {
                         RiskInfactor = RiskInfactor + 4;
                     }
                     else if (SBP >= 160 && SBP <= 169)
                     {
                         RiskInfactor = RiskInfactor + 5;
                     }
                     else if (SBP >= 170 && SBP <= 179)
                     {
                         RiskInfactor = RiskInfactor + 6;
                     }
                     else if (SBP >= 180 && SBP <= 189)
                     {
                         RiskInfactor = RiskInfactor + 7;
                     }
                     else if (SBP >= 190 && SBP <= 199)
                     {
                         RiskInfactor = RiskInfactor + 8;
                     }
                     else if (SBP >= 200 && SBP <= 209)
                     {
                         RiskInfactor = RiskInfactor + 9;
                     }
                     else
                     {
                         RiskInfactor = RiskInfactor + 10;
                     }	 
			 }    
			Harvard = 6.304 * Math.pow(10, -8) * Math.pow(RiskInfactor, 5) - 5.027 * Math.pow(10, -6) * Math.pow(RiskInfactor, 4) + 0.0001768 * Math.pow(RiskInfactor, 3) - 0.001998 * Math.pow(RiskInfactor, 2) + 0.01294 * RiskInfactor + 0.0409;
			Harvard=Harvard/100;
          }, 
          error: function(msg) {alert("请输入相关参数");}
      });
	  return Harvard;
	}
	
    //心血管疾病
    function GetFramingham(PatientId)
	{  
	  $.ajax({  
          type: "POST",
          dataType: "xml",
		  timeout: 30000,  
		  //url: 'http://'+ 'localhost:48401/' +serviceName+'/GetFramingham',
		  //url: 'http://'+ 'localhost:48401/' +servicename+'/GetFramingham',
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetFramingham',
		  async:false,
          data: {UserId:PatientId},//输入变量
		  beforeSend: function(){},
          success: function(result) 
		  { 
			 Framingham=$(result).text();
			 evaluate.Framingham=Framingham;	    
          }, 
          error: function(msg) {alert("请输入相关参数");}
      });
	  return Framingham;
	}	
	
    //中风
    function GetStroke(PatientId)
	{  
	  $.ajax
	  ({  
          type: "POST",
          dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetStroke',
		  //url: 'http://'+ 'localhost:48401/' +servicename+'/GetStroke',
		  async:false,
          data: {UserId:PatientId},//输入变量
		  beforeSend: function(){},
          success: function(result) 
		  { 
			 Stroke=$(result).text();	  
			 Stroke=Stroke.split("||");
			 var RiskInfactor=parseFloat(Stroke[0]); 
			 evaluate.RiskInfactor3=RiskInfactor;
			 var Gender = Stroke[1];
			 var Value3 = Stroke[2];
			 evaluate.Value3=Value3;
			 var SBP=$('#TextInput1').val(); 
			 //男性SBP加成
			 if (Gender==1)
			 {
				if (Value3 != 1) //没有治疗过高血压的情况
                {
                         if (SBP <= 105)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 106 && SBP <= 115)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 116 && SBP <= 125)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 126 && SBP <= 135)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 136 && SBP <= 145)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 146 && SBP <= 155)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 156 && SBP <= 165)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 166 && SBP <= 175)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 176 && SBP <= 185)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 186 && SBP <= 195)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                 }
                else//治疗过高血压的情况
                     {
                         if (SBP <= 105)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 106 && SBP <= 112)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 113 && SBP <= 117)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 118 && SBP <= 123)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 124 && SBP <= 129)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 130 && SBP <= 135)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 136 && SBP <= 142)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 143 && SBP <= 150)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 151 && SBP <= 161)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 162 && SBP <= 176)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                     }	 
				var Risk = new Array(3, 3, 4, 4, 5, 5, 6, 7, 8, 10, 11, 13, 15, 17, 20, 22, 26, 29, 33, 37, 42, 47, 52, 57, 63, 68, 74, 79, 84, 88);
				//alert(Risk[1]-1)
				 Stroke = Risk[RiskInfactor-1] / 100;
			 }
			 //女性SBP加成
			 else
			 {
			 	 if (Value3 != 1) //没有治疗过高血压的情况
                     {
                         if (SBP <= 94)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 95 && SBP <= 106)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 107 && SBP <= 118)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 119 && SBP <= 130)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 131 && SBP <= 143)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 144 && SBP <= 155)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 156 && SBP <= 167)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 168 && SBP <= 180)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 181 && SBP <= 192)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 193 && SBP <= 204)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                     }
                 else//治疗过高血压的情况
                     {
                         if (SBP <= 94)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 95 && SBP <= 106)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 107 && SBP <= 113)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 114 && SBP <= 119)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 120 && SBP <= 125)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 126 && SBP <= 131)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 132 && SBP <= 139)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 140 && SBP <= 148)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 149 && SBP <= 160)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 161 && SBP <= 204)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                     }
			     var Risk = new Array(1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 8, 9, 11, 13, 16, 19, 23, 27, 32, 37, 43, 50, 57, 64, 71, 78, 84);
				 //alert(Risk[1]-1);
				Stroke = Risk[RiskInfactor-1] / 100;         
			 }
			 
          }, 
          error: function(msg) {alert("请输入相关参数");}
      });
	  return Stroke;
	}	
	
    //心衰
    function GetHeartFailure(PatientId)
	{  
	  $.ajax
	  ({  
          type: "POST",
          dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetHeartFailure',
		  //url: 'http://'+ 'localhost:48401/' +servicename+'/GetHeartFailure',
		  async:false,
          data: {UserId:PatientId},//输入变量
		  beforeSend: function(){},
          success: function(result) 
		  { 
			 Heart=$(result).text();
			 Heart=Heart.split("||");
			 var RiskInfactor=parseFloat(Heart[0]); 
			 evaluate.RiskInfactor4=RiskInfactor;
			 var Gender = Heart[1];	 
			 var SBP=$('#TextInput1').val(); 
			 if (Gender==1)
			 {
				  if (SBP <= 119)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 120 && SBP <= 139)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 140 && SBP <= 169)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 170 && SBP <= 189)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 190 && SBP <= 219)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
				  if (RiskInfactor <= 5)
                     {
                         HeartFailureRisk = 1;
                     }
                     else if (RiskInfactor > 5 && RiskInfactor < 14)
                     {
                         HeartFailureRisk = 3;
                     }
                     else if (RiskInfactor >= 14 && RiskInfactor < 16)
                     {
                         HeartFailureRisk = 5;
                     }
                     else if (RiskInfactor >= 16 && RiskInfactor < 18)
                     {
                         HeartFailureRisk = 8;
                     }
                     else if (RiskInfactor >= 18 && RiskInfactor < 20)
                     {
                         HeartFailureRisk = 11;
                     }
                     else if (RiskInfactor >= 20 && RiskInfactor < 22)
                     {
                         HeartFailureRisk = 11;
                     }
                     else if (RiskInfactor >= 22 && RiskInfactor < 24)
                     {
                         HeartFailureRisk = 22;
                     }
                     else if (RiskInfactor >= 24 && RiskInfactor < 25)
                     {
                         HeartFailureRisk = 30;
                     }
                     else if (RiskInfactor >= 25 && RiskInfactor < 26)
                     {
                         HeartFailureRisk = 34;
                     }
                     else if (RiskInfactor >= 26 && RiskInfactor < 27)
                     {
                         HeartFailureRisk = 39;
                     }
                     else if (RiskInfactor >= 27 && RiskInfactor < 28)
                     {
                         HeartFailureRisk = 44;
                     }
                     else if (RiskInfactor >= 28 && RiskInfactor < 29)
                     {
                         HeartFailureRisk = 49;
                     }
                     else if (RiskInfactor >= 29 && RiskInfactor < 30)
                     {
                         HeartFailureRisk = 54;
                     }
                     else 
                     {
                         HeartFailureRisk = 59;
                     }
				  Heart=HeartFailureRisk/100;
			 }
			 else
			 {
				if (SBP < 140)
                     {
                         RiskInfactor = RiskInfactor + 0;
                     }
                     else if (SBP >= 140 && SBP <= 209)
                     {
                         RiskInfactor = RiskInfactor + 1;
                     }
                     else
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }	 
				if (RiskInfactor < 10)
                     {
                         HeartFailureRisk = 1;
                     }
                     else if (RiskInfactor <= 28)
                     {
                         var Risk = new Array(2,2,3, 3, 4, 5, 7, 9, 11, 14, 17, 21, 25, 30, 36, 42, 48, 54, 60 );
                         HeartFailureRisk = Risk[RiskInfactor - 10];
                     }
                     else 
                     {
                         HeartFailureRisk = 60;
                     }
				Heart=HeartFailureRisk/100;
			 }  
          }, 
          error: function(msg) {alert("请输入相关参数");}
      });
	  return Heart;
	}	
	  
    //画柱状图
    function RiskBar(Hyper,Harvard,Framingham,Stroke,Heart)
    {
	  //alert(Hyper);
	  Hyper=Hyper*100;
	  Harvard=Harvard*100;
	  Framingham=Framingham*100;
	  Stroke=Stroke*100;
	  Heart=Heart*100;
	  var chartData = [
                {
                    "year": "高血压",
                    "正常": 1,
                    "您的风险": Hyper.toFixed(2)
                },
                {
                    "year": "五年危险率",
                    "正常": 1,
                    "您的风险": Harvard.toFixed(2)
                },
                {
                    "year": "心血管疾病",
                    "正常": 1,
                    "您的风险": Framingham.toFixed(2)
                },
                {
                    "year": "中风",
                    "正常": 1,
                    "您的风险": Stroke.toFixed(2)
                },
                {
                    "year": "心衰",
                    "正常": 1,
                    "您的风险": Heart.toFixed(2)
                }
            ];
                // SERIAL CHART
                chart = new AmCharts.AmSerialChart();
                chart.dataProvider = chartData;
                chart.categoryField = "year";
				
                chart.startDuration = 0;
                chart.plotAreaBorderColor = "#DADADA";
                chart.plotAreaBorderAlpha = 1;
                // this single line makes the chart a bar chart
                chart.rotate = false;

                // AXES
                // Category
                var categoryAxis = chart.categoryAxis;
                categoryAxis.gridPosition = "start";
                categoryAxis.gridAlpha = 0;
                categoryAxis.axisAlpha = 0;
				categoryAxis.labelRotation = 60;
                // Value
                var valueAxis = new AmCharts.ValueAxis();
                valueAxis.axisAlpha = 0;
                valueAxis.gridAlpha = 0;
                valueAxis.position = "bottom";
                chart.addValueAxis(valueAxis);

                // GRAPHS
                // first graph
                var graph1 = new AmCharts.AmGraph();
                graph1.type = "column";
                graph1.title = "正常";
                graph1.valueField = "正常";
                graph1.balloonText = "正常:[[value]]";
                graph1.lineAlpha = 0;
                graph1.fillColors = "#ADD981";
                graph1.fillAlphas = 1;
                chart.addGraph(graph1);

                // second graph
                var graph2 = new AmCharts.AmGraph();
                graph2.type = "column";
                graph2.title = "您的风险";
                graph2.valueField = "您的风险";
                graph2.balloonText = "您的风险:[[value]]";
                graph2.lineAlpha = 0;
                graph2.fillColors = "#81acd9";
                graph2.fillAlphas = 1;
                chart.addGraph(graph2);

                // LEGEND
                var legend = new AmCharts.AmLegend();
                chart.addLegend(legend);

                chart.creditsPosition = "top-right";

                // WRITE
                chart.write("chartdiv3");
				//alert(Hyper);	
      }
  }	
  
  
  //修改当前收缩压和舒张压时实时显示风险评估结果
  function RiskModify()
  {
	  var PatientId=localStorage.getItem('PatientId');
	  var Hyper="";
	  var Harvard="";
	  var Framingham="";
	  var Stroke="";
	  var Heart="";
	  GetHypertension(PatientId);
	  GetHarvardRisk(PatientId);
	  GetFramingham(PatientId);
	  GetStroke(PatientId);
	  GetHeartFailure(PatientId);
	  RiskBar(Hyper,Harvard,Framingham,Stroke,Heart);
	  //高血压
	 function GetHypertension(PatientId)
	 {
		var RiskInfactor=evaluate.RiskInfactor1; 
		var Age = evaluate.Age;
		var SBP=$('#TextInput1').val();
		var DBP=$('#TextInput2').val();
		RiskInfactor=RiskInfactor- 0.05933 * SBP - 0.12847 * DBP+ 0.00162 * Age*DBP;
		Hyper = 1-Math.exp(-Math.exp(((Math.log(Math.E,4))- (22.94954+ RiskInfactor))/0.87692));
		return Hyper;
	 };
	 //五年危险率
	 function GetHarvardRisk(PatientId)
	 {  
			 var RiskInfactor=evaluate.RiskInfactor2; 
			 var Gender = evaluate.Gender;//0,2女，其他男，可以调
			 var SBP=$('#TextInput1').val();
			 //不同性别SBP的影响因素
			 if (Gender==1)
			 {
				     if (SBP <= 119)
                     {
                         RiskInfactor = RiskInfactor + 0;
                     }
                     else if (SBP >= 120 && SBP <= 129)
                     {
                         RiskInfactor = RiskInfactor + 1;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 140 && SBP <= 149)
                     {
                         RiskInfactor = RiskInfactor + 3;
                     }
                     else if (SBP >= 150 && SBP <= 159)
                     {
                         RiskInfactor = RiskInfactor + 4;
                     }
                     else if (SBP >= 160 && SBP <= 169)
                     {
                         RiskInfactor = RiskInfactor + 5;
                     }
                     else if (SBP >= 170 && SBP <= 179)
                     {
                         RiskInfactor = RiskInfactor + 6;
                     }
                     else if (SBP >= 180 && SBP <= 189)
                     {
                         RiskInfactor = RiskInfactor + 8;
                     }
                     else if (SBP >= 190 && SBP <= 199)
                     {
                         RiskInfactor = RiskInfactor + 9;
                     }
                     else if (SBP >= 200 && SBP <= 209)
                     {
                         RiskInfactor = RiskInfactor + 10;
                     }
                     else
                     {
                         RiskInfactor = RiskInfactor + 11;
                     }	 
			 }
			 else
			 {
				     if (SBP <= 119)
                     {
                         RiskInfactor = RiskInfactor + 0;
                     }
                     else if (SBP >= 120 && SBP <= 129)
                     {
                         RiskInfactor = RiskInfactor + 1;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 130 && SBP <= 139)
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }
                     else if (SBP >= 140 && SBP <= 149)
                     {
                         RiskInfactor = RiskInfactor + 3;
                     }
                     else if (SBP >= 150 && SBP <= 159)
                     {
                         RiskInfactor = RiskInfactor + 4;
                     }
                     else if (SBP >= 160 && SBP <= 169)
                     {
                         RiskInfactor = RiskInfactor + 5;
                     }
                     else if (SBP >= 170 && SBP <= 179)
                     {
                         RiskInfactor = RiskInfactor + 6;
                     }
                     else if (SBP >= 180 && SBP <= 189)
                     {
                         RiskInfactor = RiskInfactor + 7;
                     }
                     else if (SBP >= 190 && SBP <= 199)
                     {
                         RiskInfactor = RiskInfactor + 8;
                     }
                     else if (SBP >= 200 && SBP <= 209)
                     {
                         RiskInfactor = RiskInfactor + 9;
                     }
                     else
                     {
                         RiskInfactor = RiskInfactor + 10;
                     }	 
			 }    
			Harvard = 6.304 * Math.pow(10, -8) * Math.pow(RiskInfactor, 5) - 5.027 * Math.pow(10, -6) * Math.pow(RiskInfactor, 4) + 0.0001768 * Math.pow(RiskInfactor, 3) - 0.001998 * Math.pow(RiskInfactor, 2) + 0.01294 * RiskInfactor + 0.0409;
			Harvard=Harvard/100;
			return Harvard;
	}
	 
	//心血管疾病
	function GetFramingham(PatientId)
	{  
	 	Framingham=evaluate.Framingham;	    
		return Framingham;
	}	
	
	//中风
	function GetStroke(PatientId)
	{  
	  	var RiskInfactor=evaluate.RiskInfactor3;
		var Gender = evaluate.Gender;
		var Value3 = evaluate.Value3;
	    var SBP=$('#TextInput1').val(); 
		//男性SBP加成
		if (Gender==1)
		{
				if (Value3 != 1) //没有治疗过高血压的情况
                {
                         if (SBP <= 105)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 106 && SBP <= 115)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 116 && SBP <= 125)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 126 && SBP <= 135)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 136 && SBP <= 145)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 146 && SBP <= 155)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 156 && SBP <= 165)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 166 && SBP <= 175)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 176 && SBP <= 185)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 186 && SBP <= 195)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                 }
                else//治疗过高血压的情况
                     {
                         if (SBP <= 105)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 106 && SBP <= 112)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 113 && SBP <= 117)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 118 && SBP <= 123)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 124 && SBP <= 129)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 130 && SBP <= 135)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 136 && SBP <= 142)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 143 && SBP <= 150)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 151 && SBP <= 161)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 162 && SBP <= 176)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                     }	 
				var Risk = new Array(3, 3, 4, 4, 5, 5, 6, 7, 8, 10, 11, 13, 15, 17, 20, 22, 26, 29, 33, 37, 42, 47, 52, 57, 63, 68, 74, 79, 84, 88);
				//alert(Risk[1]-1)
				 Stroke = Risk[RiskInfactor-1] / 100;
			 }
			 //女性SBP加成
			 else
			 {
			 	 if (Value3 != 1) //没有治疗过高血压的情况
                     {
                         if (SBP <= 94)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 95 && SBP <= 106)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 107 && SBP <= 118)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 119 && SBP <= 130)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 131 && SBP <= 143)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 144 && SBP <= 155)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 156 && SBP <= 167)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 168 && SBP <= 180)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 181 && SBP <= 192)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 193 && SBP <= 204)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                     }
                 else//治疗过高血压的情况
                     {
                         if (SBP <= 94)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 95 && SBP <= 106)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 107 && SBP <= 113)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 114 && SBP <= 119)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 120 && SBP <= 125)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else if (SBP >= 126 && SBP <= 131)
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
                         else if (SBP >= 132 && SBP <= 139)
                         {
                             RiskInfactor = RiskInfactor + 6;
                         }
                         else if (SBP >= 140 && SBP <= 148)
                         {
                             RiskInfactor = RiskInfactor + 7;
                         }
                         else if (SBP >= 149 && SBP <= 160)
                         {
                             RiskInfactor = RiskInfactor + 8;
                         }
                         else if (SBP >= 161 && SBP <= 204)
                         {
                             RiskInfactor = RiskInfactor + 9;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 10;
                         }
                     }
			     var Risk = new Array(1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 8, 9, 11, 13, 16, 19, 23, 27, 32, 37, 43, 50, 57, 64, 71, 78, 84);
				 //alert(Risk[1]-1);
				Stroke = Risk[RiskInfactor-1] / 100;         
			 }
		return Stroke;
	}	
	
	//心衰
	function GetHeartFailure(PatientId)
	{  

			 var RiskInfactor=evaluate.RiskInfactor4;
			 var Gender = evaluate.Gender;	 
			 var SBP=$('#TextInput1').val(); 
			 //性别对SBP的影响
			 if (Gender==1)
			 {
				  if (SBP <= 119)
                         {
                             RiskInfactor = RiskInfactor + 0;
                         }
                         else if (SBP >= 120 && SBP <= 139)
                         {
                             RiskInfactor = RiskInfactor + 1;
                         }
                         else if (SBP >= 140 && SBP <= 169)
                         {
                             RiskInfactor = RiskInfactor + 2;
                         }
                         else if (SBP >= 170 && SBP <= 189)
                         {
                             RiskInfactor = RiskInfactor + 3;
                         }
                         else if (SBP >= 190 && SBP <= 219)
                         {
                             RiskInfactor = RiskInfactor + 4;
                         }
                         else
                         {
                             RiskInfactor = RiskInfactor + 5;
                         }
				  if (RiskInfactor <= 5)
                     {
                         HeartFailureRisk = 1;
                     }
                     else if (RiskInfactor > 5 && RiskInfactor < 14)
                     {
                         HeartFailureRisk = 3;
                     }
                     else if (RiskInfactor >= 14 && RiskInfactor < 16)
                     {
                         HeartFailureRisk = 5;
                     }
                     else if (RiskInfactor >= 16 && RiskInfactor < 18)
                     {
                         HeartFailureRisk = 8;
                     }
                     else if (RiskInfactor >= 18 && RiskInfactor < 20)
                     {
                         HeartFailureRisk = 11;
                     }
                     else if (RiskInfactor >= 20 && RiskInfactor < 22)
                     {
                         HeartFailureRisk = 11;
                     }
                     else if (RiskInfactor >= 22 && RiskInfactor < 24)
                     {
                         HeartFailureRisk = 22;
                     }
                     else if (RiskInfactor >= 24 && RiskInfactor < 25)
                     {
                         HeartFailureRisk = 30;
                     }
                     else if (RiskInfactor >= 25 && RiskInfactor < 26)
                     {
                         HeartFailureRisk = 34;
                     }
                     else if (RiskInfactor >= 26 && RiskInfactor < 27)
                     {
                         HeartFailureRisk = 39;
                     }
                     else if (RiskInfactor >= 27 && RiskInfactor < 28)
                     {
                         HeartFailureRisk = 44;
                     }
                     else if (RiskInfactor >= 28 && RiskInfactor < 29)
                     {
                         HeartFailureRisk = 49;
                     }
                     else if (RiskInfactor >= 29 && RiskInfactor < 30)
                     {
                         HeartFailureRisk = 54;
                     }
                     else 
                     {
                         HeartFailureRisk = 59;
                     }
				  Heart=HeartFailureRisk/100;
			 }
			 else
			 {
				if (SBP < 140)
                     {
                         RiskInfactor = RiskInfactor + 0;
                     }
                     else if (SBP >= 140 && SBP <= 209)
                     {
                         RiskInfactor = RiskInfactor + 1;
                     }
                     else
                     {
                         RiskInfactor = RiskInfactor + 2;
                     }	 
				if (RiskInfactor < 10)
                     {
                         HeartFailureRisk = 1;
                     }
                     else if (RiskInfactor <= 28)
                     {
                         var Risk = new Array(2,2,3, 3, 4, 5, 7, 9, 11, 14, 17, 21, 25, 30, 36, 42, 48, 54, 60 );
                         HeartFailureRisk = Risk[RiskInfactor - 10];
                     }
                     else 
                     {
                         HeartFailureRisk = 60;
                     }
				Heart=HeartFailureRisk/100;
			 }  
			 return Heart;
	}	 
	 
    //画柱状图
    function RiskBar(Hyper,Harvard,Framingham,Stroke,Heart)
    {
	  //alert(Hyper);
	  Hyper=Hyper*100;
	  Harvard=Harvard*100;
	  Framingham=Framingham*100;
	  Stroke=Stroke*100;
	  Heart=Heart*100;
	  var chartData = [
                {
                    "year": "高血压",
                    "正常": 1,
                    "您的风险": Hyper.toFixed(2)
                },
                {
                    "year": "五年危险率",
                    "正常": 1,
                    "您的风险": Harvard.toFixed(2)
                },
                {
                    "year": "心血管疾病",
                    "正常": 1,
                    "您的风险": Framingham.toFixed(2)
                },
                {
                    "year": "中风",
                    "正常": 1,
                    "您的风险": Stroke.toFixed(2)
                },
                {
                    "year": "心衰",
                    "正常": 1,
                    "您的风险": Heart.toFixed(2)
                }
            ];
                // SERIAL CHART
                chart = new AmCharts.AmSerialChart();
                chart.dataProvider = chartData;
                chart.categoryField = "year";
				
                chart.startDuration = 0;
                chart.plotAreaBorderColor = "#DADADA";
                chart.plotAreaBorderAlpha = 1;
                // this single line makes the chart a bar chart
                chart.rotate = false;

                // AXES
                // Category
                var categoryAxis = chart.categoryAxis;
                categoryAxis.gridPosition = "start";
                categoryAxis.gridAlpha = 0;
                categoryAxis.axisAlpha = 0;
				categoryAxis.labelRotation = 60;
                // Value
                var valueAxis = new AmCharts.ValueAxis();
                valueAxis.axisAlpha = 0;
                valueAxis.gridAlpha = 0;
                valueAxis.position = "bottom";
                chart.addValueAxis(valueAxis);

                // GRAPHS
                // first graph
                var graph1 = new AmCharts.AmGraph();
                graph1.type = "column";
                graph1.title = "正常";
                graph1.valueField = "正常";
                graph1.balloonText = "正常:[[value]]";
                graph1.lineAlpha = 0;
                graph1.fillColors = "#ADD981";
                graph1.fillAlphas = 1;
                chart.addGraph(graph1);

                // second graph
                var graph2 = new AmCharts.AmGraph();
                graph2.type = "column";
                graph2.title = "您的风险";
                graph2.valueField = "您的风险";
                graph2.balloonText = "您的风险:[[value]]";
                graph2.lineAlpha = 0;
                graph2.fillColors = "#81acd9";
                graph2.fillAlphas = 1;
                chart.addGraph(graph2);

                // LEGEND
                var legend = new AmCharts.AmLegend();
                chart.addLegend(legend);

                chart.creditsPosition = "top-right";

                // WRITE
                chart.write("chartdiv3");
				//alert(Hyper);	
      }
    }	
  
    //插入当前收缩压压
    function InsertCurSbp()//PatientId P444
    {
		var ret = false;
	  var CurSbp=$('#TextInput1').val();
	  if(!TestValue(CurSbp,100,200))
{
			  alert("当前收缩压数据错误。");


	  return ret;
}
	  var RecordDate ="";
	  var RecordTime = "";
	  
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetServerTime',
		  async:false,
		  data: {},
		  beforeSend: function(){},
		  success: function(result) {
			  RecordDate =  $(result).text().slice(0,10).replace(/-/g,"");	
			  RecordTime = $(result).text().slice(11,16).replace(/:/g,"");	 
		  }, 
		  error: function(msg) {alert("Error!");}
	  });
	  
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetPatientVitalSigns',
		  async:false,
		  data: {UserId:localStorage.getItem('PatientId'),
				 RecordDate:RecordDate,
				 RecordTime:RecordTime,
				 ItemType:"Bloodpressure",
				 ItemCode:"Bloodpressure_1",
				 Value:CurSbp,
				 Unit:"mmHg",
				 revUserId:localStorage.getItem('UserId'),
				 TerminalName:localStorage.getItem('TerminalName'),
				 TerminalIp:localStorage.getItem('TerminalIp'),
				 DeviceType:localStorage.getItem('DeviceType')
				 },//输入变量
		  beforeSend: function(){},
		  success: function(result) {
			  ret =  $(result).text();
			  //alert(RecordDate);
			  var SBP = CurSbp;
			  GetDescription(SBP); 
     
		 },
		 error: function(msg) {alert("InsertcurSBPError!");
		 
		 ret =false;} 
	  });
	  return ret;
    }
  
    //插入当前舒张压
    function InsertCurDbp()
    {
		var ret = false;
	  var CurDbp=$('#TextInput2').val();
	  if(!TestValue(CurDbp,40,140))
{
			  alert("当前舒张压数据错误。");
	  return ret;
}
	  var RecordDate ="";
	  var RecordTime = "";
	  
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetServerTime',
		  async:false,
		  data: {},
		  beforeSend: function(){},
		  success: function(result) {
			  RecordDate =  $(result).text().slice(0,10).replace(/-/g,"");	
			  RecordTime = $(result).text().slice(11,16).replace(/:/g,"");	 
		  }, 
		  error: function(msg) {alert("Error!");}
	  });
	  
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetPatientVitalSigns',
		  async:false,
		  data: {UserId:localStorage.getItem('PatientId'),
				 RecordDate:RecordDate,
				 RecordTime:RecordTime,
				 ItemType:"Bloodpressure",
				 ItemCode:"Bloodpressure_2",
				 Value:CurDbp,
				 Unit:"mmHg",
				 revUserId:localStorage.getItem('UserId'),
				 TerminalName:localStorage.getItem('TerminalName'),
				 TerminalIp:localStorage.getItem('TerminalIp'),
				 DeviceType:localStorage.getItem('DeviceType')
				 },//输入变量
		  beforeSend: function(){},
		  success: function(result) { 
ret = true;    
		 }, 
		 error: function(msg) {alert("InsertCurDbpError!");
		 ret = false;}
	  });
	  return ret; 
  }  
  
  //插入新Plan、当前血压、目标血压
  function InsertTarget()
  {
	  var ret = false;
	  var PlanNo = "";
	  var PLType = localStorage.getItem("PLType");
	  if(PLType == 3 || PLType == 4)
	  {
		  PlanNo = localStorage.getItem("NewPlanNo");
		  if(PlanNo == ""){
			  GetNewPlanNo();
			  PlanNo = localStorage.getItem("NewPlanNo");
			  InsertPlan(PlanNo); //将新生成的PlanNo插入Plan表
		  }
	  }
	  else if(PLType == 1)
	  {
	      PlanNo = localStorage.getItem("PlanNo");
	  }
	 ret = InsertCurSbp() && InsertCurDbp() && InsertTargetSbp(PlanNo) && InsertTargetDbp(PlanNo);
	 //alert(ret);
	 return ret;		
  }
  
  //生成PlanNo
  //修改函数名，改为GetNewPlanNo ZC 2015-05-07
  function GetNewPlanNo(){
	  $.ajax({  
		  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetNo',
		  async:false,
		  data: {NumberingType:15,
		         TargetDate:""
				 },//输入变量
		  success: function(result) { 
		  	PlanNo=$(result).text();
		  	localStorage.setItem('NewPlanNo', PlanNo);//将新生成的PlanNo插入localstorage
		  },
		  error: function(msg) {alert("GetNewPlanNoError!");}
	  });
  }
  
  //将PlanNo插入Plan表
  function InsertPlan(PlanNo)
  {
	  var PlanNo2=PlanNo;
	  //ZAM 2015-4-28
	  var StartDate =0;
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetServerTime',
		  async:false,
		  data: {},
		  beforeSend: function(){},
		  success: function(result) {
			  StartDate =  $(result).text().slice(0,10).replace(/-/g,"");		    
		  }, 
		  error: function(msg) {alert("Error!");}
	  });
	  
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetPlan',
		  async:false,
		  data: {PlanNo:PlanNo2,
				 PatientId:localStorage.getItem('PatientId'),
				 StartDate:StartDate,
				 EndDate:99999999,
				 Module:localStorage.getItem('ModuleType'),
				 Status:1,	//ZAM 2015-5-4
				 DoctorId:localStorage.getItem('UserId'),
				 piUserId:localStorage.getItem('UserId'),
				 piTerminalName:localStorage.getItem('TerminalName'),
				 piTerminalIp:localStorage.getItem('TerminalIp'),
				 piDeviceType:localStorage.getItem('DeviceType')
				 },//输入变量
		  beforeSend: function(){},
		  success: function(result) {},
		  error: function(msg) {alert("SetPlanError!");}
	  });
  }  
  
  //插入目标收缩压
  function InsertTargetSbp(PlanNo)
  {
	  var ret = false;
	  var PlanNo3=PlanNo;//取生成的PlanNo
	  var TarSbp=$('#TextInput3').val();
	  var CurSbp=$('#TextInput1').val();
if(!TestValue(TarSbp,100,200))
{
		  alert("目标收缩压数据错误。");	  

		  return ret;
}

if(!TestValue(CurSbp,100,200))
{
			  alert("当前收缩压数据错误。");

	  return ret;
}
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetTarget',
		  async:false,
		  data: {Plan:PlanNo3,
				 Id:"1",
				 Type:"Bloodpressure",
				 Code:"Bloodpressure_1",
				 Value:TarSbp,
				 Origin:CurSbp,
				 Instruction:"",
				 Unit:"mmhg",
				 piUserId:localStorage.getItem('UserId'),
				 piTerminalName:localStorage.getItem('TerminalName'),
				 piTerminalIp:localStorage.getItem('TerminalIp'),
				 piDeviceType:localStorage.getItem('DeviceType')
				 },//输入变量
		  beforeSend: function(){},
		  success: function(result) {  
ret= true;
		  },
		  error: function(msg) {alert("SetTargetSBPError!"); 
		  ret=false; }
	  }); 
	  return ret;
  }
  //插入目标舒张压
  function InsertTargetDbp(PlanNo)
  {
	  var ret =false;
	  var PlanNo1=PlanNo;//取生成的PlanNo
	 // alert(PlanNo1);
	  var TarSbp=$('#TextInput4').val();
	  var CurSbp=$('#TextInput2').val();
if(!TestValue(TarSbp,40,140))
{		  alert("目标舒张压数据错误。");

		  return ret;
}

if(!TestValue(CurSbp,40,140))
{		  alert("当前舒张压数据错误。");

		  return ret;
}

	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetTarget',
		  async:false,
		  data: {Plan:PlanNo1,
				 Id:"2",
				 Type:"Bloodpressure",
				 Code:"Bloodpressure_2",
				 Value:TarSbp,
				 Origin:CurSbp,
				 Instruction:"",
				 Unit:"mmhg",
				 piUserId:localStorage.getItem('UserId'),
				 piTerminalName:localStorage.getItem('TerminalName'),
				 piTerminalIp:localStorage.getItem('TerminalIp'),
				 piDeviceType:localStorage.getItem('DeviceType')
				 },//输入变量
		  beforeSend: function(){},
		  success: function(result) { 
ret = true;
		  },
		  error: function(msg) {alert("SetTargetDBPError!");
		  ret = false;}
      });
return ret;
  }  
  
  //获取当前血压与目标血压之间的差值
  function getGoalValue(){
	  $.ajax({  
		type: "POST",
		dataType: "xml",
		timeout: 30000,  
		url: 'http://'+ serverIP +'/'+serviceName+'/GetGoalValue',
		async:false,
		data: {PlanNo:localStorage.getItem('NewPlanNo')},
		success: function(result) {  
			target = parseInt($(result).text());
			toTarget = target;
			target = target - lifeChanges - drugChanges;
			if(target < 0){
			    target = 0;	
			}
			$("#goal").text(target + 'mmHg');
		}, 
		error: function(msg) {alert("Error! loadLifeStyle");}
	  });
  }
  
  //加载生活方式列表
  function loadLifeStyle(){
	  var sid = "";
	  var strs = "";
	  var changes = "";
	  var effect = 0;
	  $.ajax({  
		type: "POST",
		dataType: "xml",
		timeout: 30000,  
		url: 'http://'+ serverIP +'/'+serviceName+'/GetLifeStyleDetail',
		async:false,
		data: {Module:localStorage.getItem('ModuleType')},
		success: function(result) {  
			$(result).find('Table1').each(function(){		
			  sid = $(this).find("StyleId").text();
			  changes = $(this).find("CurativeEffect").text();
			  strs += '<tr><td><div class="checkboxRound"><input type="checkbox" name="LifeStyle" id="' 
				+ sid + '" value="' + sid + '" data-role="none" onclick="setLifeChanges(this, ' 
				+ changes +')"><label for="' + sid + '"></label></div></td><td>' 
				+ $(this).find("Name").text() + '</td><td>' 
				+ $(this).find("Instruction").text() + '</td><td>' 
				+ changes + $(this).find("Unit").text() + '</td><td>' 
				+ $(this).find("SideEffect").text() + '</td></tr>';
			  	
		    });
			$("#LifeStyleBody").empty();
			$("#LifeStyleBody").append(strs);  		
		}, 
		error: function(msg) {alert("Error! loadLifeStyle");}
	  });
  }
  
  //加载“上一次”或“暂存”计划的生活方式
  function loadLastLifeStyle(){
	  if(localStorage.getItem('PLType') ==1 || localStorage.getItem('PLType') == 4){
		  $.ajax({  
			  type: "POST",
			  dataType: "xml",
			  timeout: 30000,  
			  url: 'http://'+ serverIP +'/'+serviceName+'/GetPsTaskByType',
			  async:false,
			  data: {PlanNo:localStorage.getItem('PlanNo'), Type:"LifeStyle"},
			  success: function(result) {  
				  $(result).find('Table1').each(function(){		
					sid = $(this).find("Code").text();
					$("input:checkbox[id='" + sid +"']").attr('checked', 'true');
				});		
			  }, 
			  error: function(msg) {alert("Error! loadLifeStyle");}
		  });
		  
		  $("input[name='LifeStyle']:checked").each(function () {
			  effect = parseInt($(this).parent().parent().next().next().next().text());
		      lifeChanges += effect;
		      (target - effect) > 0? target -= effect: target = 0;
		  });
		  
		  $("#lifestyleChanges").text(lifeChanges + 'mmHg');
	      $("#goal").text(target + 'mmHg');
		  
	  }
  }
  
  //加载以往的“药物治疗”记录
  function loadDrugList(){
	  var plType = localStorage.getItem('PLType');
	  var strdl = "";
	  if(plType == 1 || plType == 4)
	  {
		  $.ajax({  
			  type: "POST",
			  dataType: "xml",
			  timeout: 30000,  
			  url: 'http://'+ serverIP +'/'+serviceName+'/GetPsTaskByType',
			  async:false,
			  data: {PlanNo:localStorage.getItem('PlanNo'), Type:"Drug"},
			  success: function(result) {  
			      if($(result).find('Table1').length > 0){
					  if(plType == 4){
						  strdl += '<h4>△上次计划中使用的药品：';
					  }
					  else if(plType == 1){
						  strdl += '<h4>△本次计划中原计划使用的药品：';
					  }
			          $(result).find('Table1').each(function(){		
					      strdl += $(this).find("CodeName").text() + '（' + $(this).find("Instruction").text() + '）；';
				      });
					  strdl = strdl.substr(0, strdl.length - 1);
					  strdl += '</h4>';
					  $("#LastDrugListDiv").empty();
	                  $("#LastDrugListDiv").append(strdl);
				  }
			  }, 
			  error: function(msg) {alert("Error! loadDrugList");}
		  });
		  
	  }
  }
  
  //获得患者的药嘱记录
  function getPatientDrugRecord(){
	  var strdr = "";
	  var content = "";
	  var drugId = "";
	  var otherDetail = "";
	  var divsty;
	  $.ajax({  
		type: "POST",
		dataType: "xml",
		timeout: 30000,  
		url: 'http://'+ serverIP +'/'+serviceName+'/GetPatientDrugRecord',
		async:false,
		data: {PatientId:localStorage.getItem('PatientId'),Module:localStorage.getItem('ModuleType')},
		success: function(result) {  
			if($(result).find('Table1').length > 0){
				strdr += '<fieldset data-role="controlgroup">';
	
				$(result).find('Table1').each(function(){
					content = $(this).find("DrugName").text() + '—' + $(this).find("Administration").text() 
						+ '—' + $(this).find("Frequency").text() + '，1次' + $(this).find("Dosage").text() + $(this).find("DosageUnits").text();
					drugId = $(this).find("VisitId").text() + '#' + $(this).find("OrderNo").text() + '#' + $(this).find("OrderSubNo").text();
					otherDetail = $(this).find("OrderCode").text()
						+ '#' + $(this).find("CurativeEffect").text() + '#' + $(this).find("SideEffect").text() 
						+ '#' + $(this).find("Instruction").text() + '#' + $(this).find("Unit").text();
					
					strdr += '<input type="checkbox" name="drugrecord" id="' + drugId + '" value="' + otherDetail +'">'
						+'<label for="' + drugId +'">' + content + '</label>';  	
				});
				strdr += '</fieldset>';
				divsty = {height:'250px',width:'400px',overflow:'auto'};
				$("#popupDrugDiv").css(divsty);
				$("#popupDrugDiv").empty();
				$("#popupDrugDiv").append(strdr); 
				$("#popupDrugDiv").trigger("create");	
			}
			else{
				$("#drugBtn").css("visibility", "hidden");
				$("#drugTitle").text("药物治疗：该患者暂无药嘱");
			}
		}, 
		error: function(msg) {alert("Error! getPatientDrugRecord");}
	  });
  }
  
  //选择药嘱，生成药物治疗列表
  function setPsDrug(){
	  var druginfo = "";
	  var druginfo2 = "";
	  var strpd = "";
	  var drugeffect = 0;
	  strpd += '<thead><tr><th></th><th>用法</th><th>频次及用量</th><th>说明</th><th>效果</th><th>副作用</th></tr></thead><tbody id="DrugListBody">';
	  $("input[name='drugrecord']:checked").each(function () {
		  druginfo = this.value.toString().split('#');
		  druginfo2 = $(this).siblings(0).text().split('—');
		  strpd += '<tr><td style="display:none;">' + druginfo[0] + '</td><td>' 
		  		  + druginfo2[0] +'</td><td>'
				  + druginfo2[1] + '</td><td>'
		          + druginfo2[2] + '</td><td>' 
				  + druginfo[3] + '</td><td>' 
				  + druginfo[1] + druginfo[4] + '</td><td>' 
				  + druginfo[2] + '</td></tr>';
		  drugeffect += parseInt(druginfo[1] != ""? druginfo[1]: "0");	    	
	  });
	  
	  strpd += '</tbody>';
	  $("#DrugListTable").empty();
	  $("#DrugListTable").append(strpd);
	  
	  drugChanges = 0;
	  if(lifeChanges < toTarget){
		  target = toTarget - lifeChanges;
	  }
	  
	  if(target - drugeffect > 0){
		  drugChanges = drugeffect;
		  target -= drugeffect;
	  }
	  else{
		  drugChanges = drugeffect;
		  target = 0;
	  }
	  $("#drugChanges").text(drugChanges + 'mmHg');
	  $("#goal").text(target + 'mmHg');
  }  
  
  //生活方式对血压的影响
  function setLifeChanges(cb, effect){
	  var status = cb.checked;
	  if(status){
		  lifeChanges += effect;
		  (target - effect) > 0? target -= effect: target = 0;
	  }
	  else{
		  if(lifeChanges > toTarget && lifeChanges + drugChanges - effect < toTarget){
		      target += toTarget - (lifeChanges + drugChanges - effect);		
		  }
		  else if(lifeChanges <= toTarget && target === 0){
		      target = (drugChanges >= toTarget)? 0: (toTarget - drugChanges - lifeChanges + effect);
			  target = target >=0? target: 0;
		  }
		  else if(lifeChanges <= toTarget && target !== 0){
		      target = target + effect; 
		  }
		  
		  lifeChanges -= effect; 
	  }
	  $("#lifestyleChanges").text(lifeChanges + 'mmHg');
	  $("#goal").text(target + 'mmHg');
  };
  
  //药物治疗对血压的影响
  function setDrugChanges(cb, effect){
	  var status = cb.checked;
	  if(status){
		  if(target == 0){
			  cb.checked =! cb.checked;
			  alert("已超过目标，请调整计划！");
		  }
		  else if(target - effect > 0){
		      drugChanges += effect;
			  target -= effect;
		  }
		  else{
			  drugChanges += target;
			  target = 0;
			  //alert("已超过目标，请调整计划！");
		  }
	  }
	  else{
		  if(drugChanges - effect > 0){
		      drugChanges -= effect;
		  	  target += effect;
		  }
		  else{
			  target += drugChanges;
			  drugChanges = 0;
		  }
	  }
	  $("#drugChanges").text(drugChanges + 'mmHg');
	  $("#goal").text(target + 'mmHg');

  };
  
  //创建计划，插入Ps.Task
  function setPsTask(){
	var task_str = "";
	task_str += 'VitalSign#Bloodpressure|Bloodpressure_1#@' + 'VitalSign#Bloodpressure|Bloodpressure_2#@';
	$("input[name='LifeStyle']:checked").each(function () {
		task_str = task_str + this.name.toString() + '#' + this.value.toString() + '#@'; 
	});
	
	
	//$("input[name='Drug']:checked").each(function () {
	//	task_str = task_str + this.name.toString() + '#' + this.value.toString() + '@'; 
	//});
	if($("#DrugListTable").find("tbody"))
	{
		for(var i = 0; i < $("#DrugListTable").find("tbody").find("tr").length; i++){
			task_str = task_str + 'Drug#' + trim($("#DrugListBody tr:eq(" + i + ") td:eq(0)").text()) + '#' 
				+ trim($("#DrugListBody tr:eq(" + i + ") td:eq(2)").text()) + '，' + trim($("#DrugListBody tr:eq(" + i + ") td:eq(3)").text()) + '@';		
		}
	}
	
	if(task_str != ""){
		task_str = task_str.substring(0,task_str.length-1);	
	}
	
	if(task_str != ""){
		$.ajax({
			type: "POST",
			dataType: "xml",
			timeout: 30000,  
			url: 'http://'+ serverIP +'/'+serviceName+'/CreateTask',
			async:false,
			data: {PlanNo: localStorage.getItem('NewPlanNo'),
				   Task: task_str,
				   UserId: localStorage.getItem('UserId'),
				   TerminalName: localStorage.getItem('TerminalName'),
				   TerminalIP: localStorage.getItem('TerminalIP'),
				   DeviceType: localStorage.getItem('DeviceType')
				   },
			success: function(result) { 
				 if($(result).text()){
					 $.mobile.changePage("#StartPlanPage");
				 }  
				 else{
					 alert("任务创建失败");
				 }
			},
			error: function(msg) {alert("Error! setPsTask");}
		});
	}
	else{alert("请选择任务")};
  }  
  
  //令计划被激活或暂存
  function SetPlan(PlanNo, PatientId, StartDate, EndDate, Module, Status, DoctorId, piUserId, piTerminalName, piTerminalIP, piDeviceType){
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetPlan',
		  async:false,
		  data: {PlanNo:PlanNo,
				 PatientId:PatientId,
				 StartDate:StartDate,
				 EndDate:EndDate,
				 Module:Module,
				 Status:Status,
				 DoctorId:DoctorId,
				 piUserId:piUserId,
				 piTerminalName:piTerminalName,
				 piTerminalIP:piTerminalIP,
				 piDeviceType:piDeviceType},
		  beforeSend: function(){},
		  success: function(result) {
			  var ret =  $(result).text();
			  if(ret == 1)
			  {   
				  if(Status == 3)
				  {
					  //alert("Plan " + PlanNo + " starts");
		alert("新建计划： " + PlanNo + " 成功！");

					  location.href = "HomePage.html?";	//ZAM 2015-5-4
				  }
				  else
				  {
					  alert("Back to edit plan "+ PlanNo);
				  }
			  }
			  else
			  {		
				  alert("失败");
			  }				    
		 }, 
		 error: function(msg) {alert("Error!");}
     });	
  }
  
  //得到任务清单
  function GetPsTask(PlanNo){
		$.ajax({  
        type: "POST",
        dataType: "xml",
		timeout: 30000,  
		url: 'http://'+ serverIP +'/'+serviceName+'/GetPsTask',
		//url: 'http://localhost:58895/Services.asmx/GetPsTask',
		async:false,
        data: {PlanNo:PlanNo},
		beforeSend: function(){},
        success: function(result) {
			var ret =  $.trim($(result).text()).replace(/ /g,"").split("\n\n\n");
			if(ret != "")
			{   
				for(j = 0; j < ret.length; j++){
				    if(ret[j].split("\n")[0] == ""){
						ret[j] = ret[j].replace("\n","");
					}
					var res = ret[j].split("\n");
					if(res[1]=="LifeStyle"){
						res[1] = "生活方式";
					}
					if(res[1]=="VitalSign"){
					    res[1] = "体征测量";
					}
					if(res[1]=="Drug"){
					    res[1] = "药物治疗";
					}
					if(res[4] == null){
						res[4] = "";
					}
					Tasklist[j] = res[0];
					if(j == 0){
						$("#L" + j).next().remove();
						$("#L" + j).after('<tbody><tr id="L' + (j+1) + '"><td><div align="center" style="width:80px;word-wrap:break-word;">' + res[0] + '</div></td><td><div align="center" style="width:80px;word-wrap:break-word;">' + res[1] + '</div></td><td><div align="center" style="width:80px;word-wrap:break-word;">' + res[3] + '</div></td><td><div style="width:185px;word-wrap:break-word;">' + res[4] + '</div></td></tr>');
					}
					else{
						$("#L" + j).after('<tr id="L' + (j+1) + '"><td><div align="center" style="width:80px;word-wrap:break-word;">' + res[0] + '</div></td><td><div align="center" style="width:80px;word-wrap:break-word;">' + res[1] + '</div></td><td><div align="center" style="width:80px;word-wrap:break-word;">' + res[3] + '</div></td><td><div style="width:185px;word-wrap:break-word;">' + res[4] + '</div></td></tr>');
					}
				}
				$("#L" + (j-1)).after('</tbody>');
			}
			else
			{		
			  	alert("该计划还没有布置任务");
			}				    
       }, 
       error: function(msg) {alert("Error!");}
     });	
  }
  
  //得到计划的目标
  function GetPsTarget(PlanNo){
	  $.ajax({  
	      type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetPsTarget',
		  async:false,
		  data: {PlanNo:PlanNo},
		  beforeSend: function(){},
		  success: function(result) {
			  var ret =  $.trim($(result).text()).replace(/ /g,"").split("\n\n\n");
			  if(ret != "")
			  {  
				  for(j = 0; j < ret.length; j++){
				  	  if(ret[j].split("\n")[0] == ""){
						ret[j] = ret[j].replace("\n","");
					  }
				  	  var res = ret[j].split("\n");
					  if(res[1] == "Bloodpressure" && res[3] == "Bloodpressure_1"){
						  $("#OSBP").val(res[6]);
						  $("#TSBP").val(res[5]);
					  }
					  if(res[1] == "Bloodpressure" && res[3] == "Bloodpressure_2"){
						  $("#ODBP").val(res[6]);
						  $("#TDBP").val(res[5]);
					  }
				  }
			  }
			  else
			  {		
				  alert("该计划还没有目标");
		 	  }				    
		  }, 
	      error: function(msg) {alert("Error!");}
      });	
  }
	
  //得到计划信息
  function GetPlanInfo(PlanNo){
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetPlanInfo',
		  async:false,
		  data: {PlanNo:PlanNo},
		  beforeSend: function(){},
		  success: function(result) {
			  var ret =  $.trim($(result).text()).split(/\s+/);
			  if(ret != "")
			  {  
				  PatientId = ret[1];
				  StartDate = ret[2];
				  Module = ret[4];
				  DoctorId = ret[6];
			  }
			  else
			  {		
				  alert("计划读取失败");
			  }				    
		  }, 
		  error: function(msg) {alert("Error!");}
	  });	
  }
  
  //LY 20150604
  function SetCompliance(PatientId, DDate, PlanNo, Compliance, revUserId, TerminalName, TerminalIP, DeviceType){
      $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetCompliance',
		  async:false,
		  data: {PatientId:PatientId,
				 DDate:DDate,
				 PlanNo:PlanNo,
				 Compliance:Compliance,
				 revUserId:revUserId,
				 TerminalName:TerminalName,
				 TerminalIP:TerminalIP,
				 DeviceType:DeviceType},
		  beforeSend: function(){},
		  success: function(result) {
			  var ret =  $(result).text();			    
		 }, 
		 error: function(msg) {alert("Error!");}
     });
  }
  
  //LY 20150604
  function SetComplianceDetail(PatientId, DDate, PlanNo, Id, Status, CoUserId, CoTerminalName, CoTerminalIP, CoDeviceType){
      var Parent = PatientId + "||" + DDate + "||" + PlanNo;
      $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/SetComplianceDetail',
		  async:false,
		  data: {Parent:Parent,
				 Id:Id,
				 Status:Status,
				 CoUserId:CoUserId,
				 CoTerminalName:CoTerminalName,
				 CoTerminalIP:CoTerminalIP,
				 CoDeviceType:CoDeviceType},
		  beforeSend: function(){},
		  success: function(result) {
			  var ret =  $(result).text();			    
		 }, 
		 error: function(msg) {alert("SetComplianceDetail Error!");}
     });
  }
  
  //按下"确认开始"后发生LY
  function btn1_listener_f()
  {
	  $.ajax({  
		  type: "POST",
		  dataType: "xml",
		  timeout: 30000,  
		  url: 'http://'+ serverIP +'/'+serviceName+'/GetServerTime',
		  async:false,
		  data: {},
		  beforeSend: function(){},
		  success: function(result) {
			  StartDate =  $(result).text().slice(0,10).replace(/-/g,"");		    
		  }, 
		  error: function(msg) {alert("Error!");}
	  });
	  var EndDate = $("#EndDate").val().replace(/-/g,"");
	  //GetPlanInfo(localStorage.getItem('NewPlanNo'));
	  if(EndDate == ""){
	  	  $("#Alert").html("请输入结束时间");
		  return;
	  }
	  if(EndDate < StartDate){
	  	  $("#Alert").html("结束日期不能早于开始日期");
		  return;
	  }
	  $("#Alert").html("");
	  SetCompliance(localStorage.getItem('PatientId'), StartDate, localStorage.getItem('NewPlanNo'), 0, localStorage.getItem('UserId'), localStorage.getItem('TerminalName'), localStorage.getItem('TerminalIP'), localStorage.getItem('DeviceType'));
	  for(q = 0; q < Tasklist.length; q++){
	      SetComplianceDetail(localStorage.getItem('PatientId'), StartDate, localStorage.getItem('NewPlanNo'), Tasklist[q], 0, localStorage.getItem('UserId'), localStorage.getItem('TerminalName'), localStorage.getItem('TerminalIP'), localStorage.getItem('DeviceType'));
	  }
	  SetPlan(localStorage.getItem('NewPlanNo'), localStorage.getItem('PatientId'), StartDate, EndDate, localStorage.getItem('ModuleType'), 3, localStorage.getItem('UserId'), localStorage.getItem('UserId'), localStorage.getItem('TerminalName'), localStorage.getItem('TerminalIP'), localStorage.getItem('DeviceType'));
  }
  function TestValue(value, minValue, maxValue)
  {
	  var ret = false;
	if(value != "" && (value>=minValue &&value<=maxValue))
	   ret = true;
	   return ret; 
  }
</script>
</html>
